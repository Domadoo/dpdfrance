<?php
/**
 * Copyright 2025 DPD France S.A.S.
 *
 * This file is a part of dpdfrance module for Prestashop.
 *
 * NOTICE OF LICENSE
 *
 * This file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for
 * your needs please contact us at support.ecommerce@dpd.fr.
 *
 * @author    DPD France S.A.S. <support.ecommerce@dpd.fr>
 * @copyright 2025 DPD France S.A.S.
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
if (!defined('_PS_VERSION_')) {
    exit;
}

use PrestaShop\Module\DPDFrance\ExternalContentProvider\Transcription\Webtrace\clsTrace;
use PrestaShop\Module\DPDFrance\ExternalContentProvider\WebtraceProvider;
use PrestaShop\Module\DPDFrance\Util\DPDCompliancy;
use PrestaShop\Module\DPDFrance\Util\DPDConfig;
use PrestaShop\Module\DPDFrance\Util\DPDTools;

class DPDFranceAjaxModuleFrontController extends ModuleFrontController
{
    /**
     * Initializes the content.
     */
    public function initContent()
    {
        parent::initContent();

        // Define DPDFranceAjaxModuleFrontController as an Ajax call
        $this->ajax = true;

        // Retrieve user inputs or GET vars
        $params = [
            'order' => Tools::getValue('order'),
            'address1' => Tools::getValue('address'),
            'address_id' => Tools::getValue('address_id'),
            'carrier_id' => Tools::getValue('carrier_id'),
            'postcode' => Tools::getValue('zipcode'),
            'city' => Tools::getValue('city'),
            'pudo_id' => Tools::getValue('pudo_id'),
            'gsm_dest' => Tools::getValue('gsm_dest'),
            'action' => Tools::getValue('action'),
            'dpdfrance_cart_id' => Tools::getValue('dpdfrance_cart_id'),
            'webservice_type' => Tools::getValue('webservice_type'),
            'shop_context' => Tools::getValue('shop_context'),
            'shop_group_id' => Tools::getValue('shop_group_id'),
            'shop_id' => Tools::getValue('shop_id'),
            'zip' => Tools::getValue('zip'),
            'street' => Tools::getValue('street'),
            'phone' => Tools::getValue('phone'),
            'return' => Tools::getValue('return'),
            'insurrance' => Tools::getValue('insurrance'),
            'weights' => Tools::getValue('weights'),
        ];

        $result = null;
        if ($action = Tools::getValue('action_ajax_dpdfrance')) {
            switch ($action) {
                case 'ajaxGetService':
                    $result = Module::getInstanceByName('dpdfrance')->ajaxGetService($params);
                    break;
                case 'ajaxUpdatePoints':
                    $result = Module::getInstanceByName('dpdfrance')->ajaxUpdatePoints($params);
                    break;
                case 'ajaxRegisterGsm':
                    $result = json_encode(Module::getInstanceByName('dpdfrance')->ajaxRegisterGsm());
                    break;
                case 'ajaxUpdateShipping':
                    $result = json_encode(Module::getInstanceByName('dpdfrance')->ajaxUpdateShipping());
                    break;
                case 'ajaxGetGsmFromSelectedAddress':
                    $result = Module::getInstanceByName('dpdfrance')->ajaxGetGsmFromSelectedAddress($params);
                    break;
                case 'ajaxGetLeadtime':
                    $result = Module::getInstanceByName('dpdfrance')->ajaxGetLeadtime($params);
                    break;
                case 'ajaxRegisterPudo':
                    $result = json_encode(Module::getInstanceByName('dpdfrance')->ajaxRegisterPudo());
                    break;
                case 'ajaxRefreshListPdf':
                    $result = json_encode(Module::getInstanceByName('dpdfrance')->ajaxRefreshListPdf());
                    break;
                case 'ajaxGetWebserviceStatus':
                    $result = Module::getInstanceByName('dpdfrance')->ajaxGetWebserviceStatus($params);
                    break;
                case 'getAddressOrder':
                    $result = Module::getInstanceByName('dpdfrance')->ajaxGetAddressOrder($params);
                    break;
                case 'setAddressOrder':
                    $result = Module::getInstanceByName('dpdfrance')->ajaxSetAddressOrder($params);
                    break;
                case 'ajaxCron':
                    ini_set('max_execution_time', 1200);
                    ini_set('default_socket_timeout', 5);

                    // Check security token
                    if (Tools::hash('dpdfrance/cron') !== Tools::getValue('token') || !Module::isInstalled(
                            'dpdfrance'
                        )) {
                        die('Bad token');
                    }

                    $employeeId = Tools::getValue('employee');
                    $force = Tools::getValue('force');
                    $idShopGroup = (int)Tools::getValue('shop_group_id');
                    $idShop = (int)Tools::getValue('shop_id');
                    $result = $this->syncShipments($employeeId, $force, $idShopGroup, $idShop);
                    break;
                default:
                    $result = '';
                    break;
            }
        }

        $this->ajaxRender($result);
    }

    /**
     * Sync order status with parcel status, adds tracking number
     *
     * @param string $id_employee
     * @param string $force
     * @param int $idShopGroup
     * @param int $idShop
     * @return null
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function syncShipments(string $id_employee, string $force, int $idShopGroup, int $idShop)
    {
        // Check if last tracking call is more than 1h old
        if ($force !== '1' && (time() - DPDConfig::get(
                    'DPDFRANCE_LAST_TRACKING',
                    $this->context->language->id,
                    $idShopGroup,
                    $idShop
                ) < 3600)) {
            die(
                'DPD France parcel tracking update is done once every hour. - Last update on : ' . date(
                    'd/m/Y - H:i:s',
                    DPDConfig::get(
                        'DPDFRANCE_LAST_TRACKING',
                        $this->context->language->id,
                        $idShopGroup,
                        $idShop
                    )
                )
            );
        }
        // Update the last tracking time
        DPDConfig::updateValue(
            'DPDFRANCE_LAST_TRACKING',
            time(),
            false,
            $idShopGroup,
            $idShop
        );

        /*
         * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
         * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
         * This fix avoids a timeout with max_input_time.
         */
        $dateStartScript = new DateTime();

        $predict_carrier_log = $classic_carrier_log = $relais_carrier_log = $predict_carrier_sql = $classic_carrier_sql = $relais_carrier_sql = '';

        // If the DPD Marketplace setting is enabled then check all carriers ELSE check only DPD carriers
        $opt_marketplace_sql = DPDConfig::get(
            'DPDFRANCE_MARKETPLACE_MODE',
            $this->context->language->id,
            $idShopGroup,
            $idShop
        ) ?
            'CA.name LIKE \'%%\'' :
            'CA.name LIKE \'%DPD%\'';

        // If multistore
        if (Shop::isFeatureActive()) {
            foreach (Shop::getShops() as $shop) {
                if ((int)DPDConfig::get(
                    'DPDFRANCE_PREDICT_CARRIER_ID',
                    $this->context->language->id,
                    (int)$shop['id_shop_group'],
                    (int)$shop['id_shop']
                )) {
                    $predict_carrier_log .= (int)DPDConfig::get(
                            'DPDFRANCE_PREDICT_CARRIER_ID',
                            $this->context->language->id,
                            (int)$shop['id_shop_group'],
                            (int)$shop['id_shop']
                        )
                        . ',' . implode(
                            ',',
                            DPDConfig::get(
                                'DPDFRANCE_PREDICT_CARRIER_LOG',
                                $this->context->language->id,
                                (int)$shop['id_shop_group'],
                                (int)$shop['id_shop']
                            )
                        );
                }
                if ((int)DPDConfig::get(
                    'DPDFRANCE_CLASSIC_CARRIER_ID',
                    $this->context->language->id,
                    (int)$shop['id_shop_group'],
                    (int)$shop['id_shop']
                )) {
                    $classic_carrier_log .= (int)DPDConfig::get(
                            'DPDFRANCE_CLASSIC_CARRIER_ID',
                            $this->context->language->id,
                            (int)$shop['id_shop_group'],
                            (int)$shop['id_shop']
                        )
                        . ',' . implode(
                            ',',
                            DPDConfig::get(
                                'DPDFRANCE_CLASSIC_CARRIER_LOG',
                                $this->context->language->id,
                                (int)$shop['id_shop_group'],
                                (int)$shop['id_shop']
                            )
                        );
                }
                if ((int)DPDConfig::get(
                    'DPDFRANCE_RELAIS_CARRIER_ID',
                    $this->context->language->id,
                    (int)$shop['id_shop_group'],
                    (int)$shop['id_shop']
                )) {
                    $relais_carrier_log .= (int)DPDConfig::get(
                            'DPDFRANCE_RELAIS_CARRIER_ID',
                            $this->context->language->id,
                            (int)$shop['id_shop_group'],
                            (int)$shop['id_shop']
                        )
                        . ',' . implode(
                            ',',
                            DPDConfig::get(
                                'DPDFRANCE_RELAIS_CARRIER_LOG',
                                $this->context->language->id,
                                (int)$shop['id_shop_group'],
                                (int)$shop['id_shop']
                            )
                        );
                }
            }
        }

        // If not multistore
        if ((int)DPDConfig::get(
            'DPDFRANCE_PREDICT_CARRIER_ID',
            $this->context->language->id,
            $idShopGroup,
            $idShop
        )) {
            if (!empty($predict_carrier_log)) {
                $predict_carrier_log .= ',';
            }
            $predict_carrier_log .= (int)DPDConfig::get(
                    'DPDFRANCE_PREDICT_CARRIER_ID',
                    $this->context->language->id,
                    $idShopGroup,
                    $idShop
                )
                . ',' . implode(
                    ',',
                    DPDConfig::get(
                        'DPDFRANCE_PREDICT_CARRIER_LOG',
                        $this->context->language->id,
                        $idShopGroup,
                        $idShop
                    )
                );
            $predict_carrier_sql = 'CA.id_carrier IN (' . implode(
                    ',',
                    array_map('intval', array_unique(explode(',', $predict_carrier_log)))
                ) . ') OR ';
        }

        if ((int)DPDConfig::get(
            'DPDFRANCE_CLASSIC_CARRIER_ID',
            $this->context->language->id,
            $idShopGroup,
            $idShop
        )) {
            if (!empty($classic_carrier_log)) {
                $classic_carrier_log .= ',';
            }
            $classic_carrier_log .= (int)DPDConfig::get(
                    'DPDFRANCE_CLASSIC_CARRIER_ID',
                    $this->context->language->id,
                    $idShopGroup,
                    $idShop
                )
                . ',' . implode(
                    ',',
                    DPDConfig::get(
                        'DPDFRANCE_CLASSIC_CARRIER_LOG',
                        $this->context->language->id,
                        $idShopGroup,
                        $idShop
                    )
                );
            $classic_carrier_sql = 'CA.id_carrier IN (' . implode(
                    ',',
                    array_map('intval', array_unique(explode(',', $classic_carrier_log)))
                ) . ') OR ';
        }

        if ((int)DPDConfig::get(
            'DPDFRANCE_RELAIS_CARRIER_ID',
            $this->context->language->id,
            $idShopGroup,
            $idShop
        )) {
            if (!empty($relais_carrier_log)) {
                $relais_carrier_log .= ',';
            }
            $relais_carrier_log .= (int)DPDConfig::get(
                    'DPDFRANCE_RELAIS_CARRIER_ID',
                    $this->context->language->id,
                    $idShopGroup,
                    $idShop
                )
                . ',' . implode(
                    ',',
                    DPDConfig::get(
                        'DPDFRANCE_RELAIS_CARRIER_LOG',
                        $this->context->language->id,
                        $idShopGroup,
                        $idShop
                    )
                );
            $relais_carrier_sql = 'CA.id_carrier IN (' . implode(
                    ',',
                    array_map('intval', array_unique(explode(',', $relais_carrier_log)))
                ) . ') OR ';
        }

        // GET DPD ORDER WHICH IS NOT WITH THE ORDER STATUS DELIVERED, CANCELLED, REFUNDED AND PAYMENT ERROR
        $sql = '
                    SELECT      O.reference as reference, 
                                O.id_carrier as id_carrier, 
                                O.id_order as id_order,
                                O.id_shop as id_shop
                    FROM        ' . _DB_PREFIX_ . 'orders AS O, ' . _DB_PREFIX_ . 'carrier AS CA
                    WHERE       CA.id_carrier = O.id_carrier 
                    AND         O.current_state
                    NOT IN      (' . DPDConfig::get(
                'DPDFRANCE_ETAPE_LIVRE',
                $this->context->language->id,
                $idShopGroup,
                $idShop
            )
            . ',' . DPDTools::ORDER_STATUS_DELIVERED
            . ',' . DPDTools::ORDER_STATUS_CANCELLED
            . ',' . DPDTools::ORDER_STATUS_REFUNDED
            . ',' . DPDTools::ORDER_STATUS_PAYEMENT_ERROR
            . ') 
                    AND         (' . $predict_carrier_sql . $classic_carrier_sql . $relais_carrier_sql . $opt_marketplace_sql . ')
                    ORDER BY    id_order DESC
                    LIMIT       1000
            ';

        /**
         * @var array{
         *      array{
         *          'reference': string,
         *          'id_carrier': string,
         *          'id_order': string,
         *          'id_shop': string,
         *      }[]
         * } $orderList
         */
        $orderList = Db::getInstance()->ExecuteS($sql);

        //Shuffle mode
        if (DPDConfig::get(
            'DPDFRANCE_SHUFFLE_MODE',
            $this->context->language->id,
            $idShopGroup,
            $idShop
        )) {
            shuffle($orderList);
        }

        if (!empty($orderList)) {
            echo 'DPD France - Sync started <br/>';
            foreach ($orderList as $orderInfos) {
                $statusList = [];
                $order = new Order($orderInfos['id_order']);
                if (Validate::isLoadedObject($order)) {
                    $internalRef = DPDConfig::get(
                        'DPDFRANCE_AUTO_UPDATE',
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    ) === DPDTools::DPD_AUTOUPDATE_ORDER_ID ? $order->id : $order->reference;

                    // Vérification dans l'historique des statuts de livraison du colis
                    //  - $past_states à 1, s'il a été en "Expédié"
                    //  - $past_states à 2, s'il a été en "Livré"
                    $pastStates = 0;
                    $orderHistory = $order->getHistory($order->id_lang);
                    foreach ($orderHistory as $state) {
                        if ((int)$state['id_order_state'] === DPDConfig::get(
                                'DPDFRANCE_ETAPE_EXPEDIEE',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            )) {
                            $pastStates = 1;
                        } elseif ((int)$state['id_order_state'] === DPDConfig::get(
                                'DPDFRANCE_ETAPE_LIVRE',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            )) {
                            $pastStates = 2;
                            break;
                        }
                    }

                    // Passe a la prochaine commande si la commande en cours de synchronisation est au statut "Livré"
                    if ($pastStates === 2) {
                        continue;
                    }

                    // Vérifie l'option de livraison de la commande actuelle
                    $service = DPDTools::getService(
                        $order,
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    );

                    /*
                     * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
                     * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
                     * This fix avoids a timeout with max_input_time.
                     */
                    if (DPDTools::getDiffDates($dateStartScript, new DateTime())) {
                        echo 'Order [ id : ' . $order->id . ' | reference: ' . $order->reference . ' ] - was not updated in order to avoid a script timeout <br/>';
                        break;
                    }

                    // Récupère les identifiants du compte en relation à l'option de livraison de la commande actuelle
                    $serviceLivraisonInfos = DPDConfig::getServiceLivraisonInfos(
                        $service,
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    );

                    // S'il n'y a aucun identifiant à l'option de livraison de la commande, je passe à la prochaine commande
                    if (empty($serviceLivraisonInfos['depot_code']) || empty($serviceLivraisonInfos['shipper_code'])) {
                        continue;
                    }

                    $prefixLog = 'Order [ id : ' . $order->id . ' | reference: ' . $order->reference . ' ] - ';
                    $variables = [
                        'Customer' => [
                            'centernumber' => $serviceLivraisonInfos['depot_code'],
                            'number' => $serviceLivraisonInfos['shipper_code'],
                            'countrycode' => '250',
                        ],
                        'Language' => 'F',
                        'Reference' => $internalRef,
                        'Searchmode' => 'Equals',
                        'GetImages' => false,
                    ];

                    /*
                     * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
                     * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
                     * This fix avoids a timeout with max_input_time.
                     */
                    if (DPDTools::getDiffDates($dateStartScript, new DateTime())) {
                        echo 'Order [ id : ' . $order->id . ' | reference: ' . $order->reference . ' ] - was not updated in order to avoid a script timeout <br/>';
                        break;
                    }

                    // Appel du webservice Webtrace pour récupérer les informations de la commande
                    try {
                        $webtraceUser = DPDConfig::get(
                            'DPDFRANCE_WEBTRACE_LOGIN',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        );
                        $webtracePassword = DPDConfig::get(
                            'DPDFRANCE_WEBTRACE_PASSWORD',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        );
                        WebtraceProvider::initSoapClient($webtraceUser, $webtracePassword, DPDFRANCE_DEV_USE_WS_TEST);

                        $shipmentTrace = WebtraceProvider::getShipmentTraceByReference($variables);
                        unset($variables);

                        // Vérification réponse webservice trace OLD
                        if (!empty($shipmentTrace[0]->LastError)) {
                            echo $prefixLog . 'Error : ' . $shipmentTrace[0]->LastError . ' <br/>';
                            continue;
                        }

                        // Constitution d'un contenant la liste des statuts cargo ($statutList)
                        if (count($shipmentTrace) === 1 && !is_null($shipmentTrace[0]->Traces)) {
                            // $result ne contient qu'un seul colis
                            $traces = $shipmentTrace[0]->Traces->clsTrace;
                            if (
                                (string)$internalRef === (string)$shipmentTrace[0]->Reference
                                || (string)$internalRef === (string)$shipmentTrace[0]->Reference2
                                || (string)$internalRef === (string)$shipmentTrace[0]->Reference3
                            ) {
                                if (!is_array($traces)) {
                                    // Le colis ne contient qu'un seul statut
                                    if (DPDTools::PASSTRHOUGHT_CEDI === false && $traces->StatusNumber === DPDTools::CARGO_CEDI) {
                                        /*
                                         * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
                                         * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
                                         * This fix avoids a timeout with max_input_time.
                                         */
                                        if (DPDTools::getDiffDates($dateStartScript, new DateTime())) {
                                            echo $prefixLog . 'was not updated in order to avoid a script timeout <br/>';
                                            break;
                                        }
                                        continue;
                                    }
                                    $statusList[$shipmentTrace[0]->ShipmentNumber][] = $traces->StatusNumber;
                                } else {
                                    // Le colis contient plusieurs statuts
                                    foreach ($traces as $trace) {
                                        $statusList[$shipmentTrace[0]->ShipmentNumber][] = $trace->StatusNumber;
                                    }
                                }
                            }
                            unset($traces);
                        } else {
                            // $result contient plusieurs colis
                            foreach ($shipmentTrace as $parcelTrace) {
                                if (
                                    (string)$internalRef === (string)$parcelTrace->Reference
                                    || (string)$internalRef === (string)$parcelTrace->Reference2
                                    || (string)$internalRef === (string)$parcelTrace->Reference3
                                ) {
                                    $datas = [
                                        'Customer' => [
                                            'centernumber' => $serviceLivraisonInfos['depot_code'],
                                            'number' => $serviceLivraisonInfos['shipper_code'],
                                            'countrycode' => '250',
                                        ],
                                        'Language' => 'F',
                                        'ShipmentNumber' => $parcelTrace->ShipmentNumber,
                                        'GetImages' => false,
                                    ];

                                    /*
                                     * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
                                     * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
                                     * This fix avoids a timeout with max_input_time.
                                     */
                                    if (DPDTools::getDiffDates($dateStartScript, new DateTime())) {
                                        echo $prefixLog . 'was not updated in order to avoid a script timeout <br/>';
                                        break;
                                    }

                                    $parcelDatas = WebtraceProvider::getShipmentTrace($datas);

                                    /**
                                     * Note dev : si Traces est null ?
                                     * @var clsTrace[]|clsTrace $parcelTraces
                                     */
                                    $parcelTraces = count($parcelDatas) > 1
                                        ? $parcelDatas[1]->Traces->clsTrace
                                        : $parcelDatas[0]->Traces->clsTrace;

                                    if (!is_array($parcelTraces)) {
                                        // Le colis ne contient qu'un seul statut
                                        if (DPDTools::PASSTRHOUGHT_CEDI === false && $parcelTraces->StatusNumber === DPDTools::CARGO_CEDI) {
                                            continue;
                                        }
                                        $statusList[$parcelTrace->ShipmentNumber][] = $parcelTraces->StatusNumber;
                                    } else {
                                        // Le colis contient plusieurs statuts
                                        foreach ($parcelTraces as $trace) {
                                            $statusList[$parcelTrace->ShipmentNumber][] = $trace->StatusNumber;
                                        }
                                    }
                                }
                                // Stop at first parcel
                                break;
                            }
                        }

                        $shipmentNumber = key($statusList);

                        // Si le tableau est vide, je passe à la prochaine commande
                        if (empty($statusList)) {
                            echo $prefixLog . 'Parcel ' . $shipmentNumber . ' is found, not yet handled by DPD <br/>';
                            continue;
                        }

                        /*
                         * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
                         * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
                         * This fix avoids a timeout with max_input_time.
                         */
                        if (DPDTools::getDiffDates($dateStartScript, new DateTime())) {
                            echo $prefixLog . 'was not updated in order to avoid a script timeout <br/>';
                            break;
                        }

                        // Affectation du flag de statut de livraison selon l'historique de statut de colis venant du webservice
                        $deliveryState = 0;
                        $cargoStatusEventTriggerForOnGoingDelivery = [
                            DPDTools::CARGO_COEC,
                            DPDTools::CARGO_CPCH,
                            DPDTools::CARGO_PICK,
                            DPDTools::CARGO_HISTORIQUE_CPCH,
                            DPDTools::CARGO_SMAN,
                        ];
                        $cargoStatusEventTriggerForDelivered = [
                            DPDTools::CARGO_REMI,
                            DPDTools::CARGO_LIVPT,
                        ];
                        if (DPDTools::PASSTRHOUGHT_CEDI === true) {
                            $cargoStatusEventTriggerForOnGoingDelivery[] = DPDTools::CARGO_CEDI;
                        }
                        foreach ($statusList as $events) {
                            // Vérification de la liste des status de la commande si la commande est en cours de preparation alors affectation du flag "Expédié"
                            if (array_intersect($cargoStatusEventTriggerForOnGoingDelivery, $events)) {
                                $deliveryState = 1;
                            }
                            // Vérification de la liste des status de la commande si la commande est livré alors affectation du flag "Livré"
                            if (array_intersect($cargoStatusEventTriggerForDelivered, $events)) {
                                $deliveryState = 2;
                            }
                        }
                        $url = null;

                        $orderCarrier = new OrderCarrier($order->getIdOrderCarrier());

                        /*
                         * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
                         * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
                         * This fix avoids a timeout with max_input_time.
                         */
                        if (DPDTools::getDiffDates($dateStartScript, new DateTime())) {
                            echo $prefixLog . 'was not updated in order to avoid a script timeout <br/>';
                            break;
                        }

                        // Ajout du suivi de commande si la commande n'en a pas
                        if (
                            Validate::isLoadedObject($orderCarrier)
                            && empty($orderCarrier->tracking_number)
                            && $deliveryState !== 0
                        ) {
                            $url = DPDConfig::get(
                                'DPDFRANCE_AUTO_UPDATE',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            ) === DPDTools::DPD_AUTOUPDATE_PARCEL_NUMBER ?
                                DPDTools::PREFIX_TRACES_URL . $shipmentNumber :
                                DPDTools::PREFIX_TRACEX_URL . $internalRef . '_' . sprintf(
                                    '%03d',
                                    $serviceLivraisonInfos['depot_code']
                                ) . $serviceLivraisonInfos['shipper_code'];

                            $trackingNumber = DPDConfig::get(
                                'DPDFRANCE_AUTO_UPDATE',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            ) === DPDTools::DPD_AUTOUPDATE_PARCEL_NUMBER ?
                                $shipmentNumber :
                                $internalRef . '_' . sprintf(
                                    '%03d',
                                    $serviceLivraisonInfos['depot_code']
                                ) . $serviceLivraisonInfos['shipper_code'];

                            if (DPDCompliancy::isMyPrestashopVersion('<', '8.0.0')) {
                                // Le champ shipping_number a été supprimé à partir de la version 8.0
                                Db::getInstance()->update(
                                    'orders',
                                    [
                                        'shipping_number' => pSQL($trackingNumber),
                                    ],
                                    'id_order = ' . (int)$order->id
                                );
                            }

                            Db::getInstance()->update(
                                'order_carrier',
                                [
                                    'tracking_number' => pSQL($trackingNumber),
                                ],
                                'id_order = ' . (int)$order->id
                            );

                            echo $prefixLog . 'Tracking number ' . $shipmentNumber . ' added <br/>';
                        }

                        /*
                         * * Si la commande est flagué comme ayant le statut livré et qui n'ait jamais eu de statut livré sur son historique de commande
                         * ? $deliveryState est défini via l'historique de status du colis du webservice
                         * ? $past_states est défini via l'historique de status de commande de Prestashop
                         * ! -> Mise à jour du statut de commande en "Livré", envoi de mail
                         */
                        if ($deliveryState === 2) {
                            // Changement de status
                            $history = new OrderHistory();
                            $history->id_order = $order->id;
                            $history->id_employee = (int)$id_employee;
                            $history->id_order_state = DPDConfig::get(
                                'DPDFRANCE_ETAPE_LIVRE',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );

                            /*
                             * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
                             * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
                             * This fix avoids a timeout with max_input_time.
                             */
                            if (DPDTools::getDiffDates($dateStartScript, new DateTime())) {
                                echo $prefixLog . 'was not updated in order to avoid a script timeout <br/>';
                                break;
                            }

                            $history->changeIdOrderState(
                                DPDConfig::get(
                                    'DPDFRANCE_ETAPE_LIVRE',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                ),
                                $order->id
                            );
                            $history->addWithemail();
                            echo $prefixLog . 'Tracking number ' . $shipmentNumber . ' is delivered <br/>';
                            continue;
                        }

                        /*
                         *  * Si la commande est en statut 'en cours de preparation' et qu'il n'a pas eu de statut "Expédié" ou "livré" dans son historique de statut Prestashop
                         * ? $deliveryState est défini via l'historique de status du colis du webservice
                         * ? $past_states est défini via l'historique de status de commande de Prestashop
                         * ! -> Mise à jour du statut de commande en "Expédié" et envoi de mail
                         */
                        if ($deliveryState === 1 && $pastStates === 0) {
                            // Changement de status
                            $history = new OrderHistory();
                            $history->id_order = $order->id;
                            $history->id_employee = (int)$id_employee;
                            $history->id_order_state = DPDConfig::get(
                                'DPDFRANCE_ETAPE_EXPEDIEE',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );

                            /*
                             * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
                             * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
                             * This fix avoids a timeout with max_input_time.
                             */
                            if (DPDTools::getDiffDates($dateStartScript, new DateTime())) {
                                echo $prefixLog . 'was not updated in order to avoid a script timeout <br/>';
                                break;
                            }

                            $history->changeIdOrderState(
                                DPDConfig::get(
                                    'DPDFRANCE_ETAPE_EXPEDIEE',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                ),
                                $order->id
                            );

                            // Envoi de mail
                            $customer = new Customer($order->id_customer);
                            $template_vars = [
                                '{followup}' => $url,
                                '{firstname}' => $customer->firstname,
                                '{lastname}' => $customer->lastname,
                                '{order_name}' => $order->reference,
                                '{id_order}' => $order->id,
                            ];
                            $subject = null;
                            switch (Language::getIsoById($order->id_lang)) {
                                case 'fr':
                                    $subject = 'Votre commande sera livrée par DPD';
                                    break;
                                case 'en':
                                    $subject = 'Your parcel will be delivered by DPD';
                                    break;
                                case 'es':
                                    $subject = 'Su pedido será enviado por DPD';
                                    break;
                                case 'it':
                                    $subject = 'Il vostro pacchetto sará trasportato da DPD';
                                    break;
                                case 'de':
                                    $subject = 'Ihre Bestellung wird per DPD geliefert werden';
                                    break;
                            }
                            $history->addWithemail(true, $template_vars);
                            Mail::Send(
                                $order->id_lang,
                                'in_transit',
                                $subject,
                                $template_vars,
                                $customer->email,
                                $customer->firstname . ' ' . $customer->lastname,
                                null,
                                null,
                                null,
                                null,
                                _PS_MAIL_DIR_,
                                false,
                                (int)$order->id_shop
                            );
                            echo $prefixLog . 'Parcel ' . $shipmentNumber . ' is handled by DPD <br/>';
                            continue;
                        }
                        /*
                         * The max_input_time value in the PHP configuration (time during which the script accepts to parse input data such as POST and GET),
                         * is used if it is different from -1, otherwise it is the max_execution_time value. It is impossible to modify the max_input_time value.
                         * This fix avoids a timeout with max_input_time.
                         */
                        if (DPDTools::getDiffDates($dateStartScript, new DateTime())) {
                            echo $prefixLog . 'was not updated in order to avoid a script timeout <br/>';
                            break;
                        }

                        echo $prefixLog . 'No update for parcel ' . $shipmentNumber . ' <br/>';
                    } catch (SoapFault $e) {
                        echo $prefixLog . 'Error : ' . $e->getMessage() . '<br/>';
                        continue;
                    }
                }
            }
            echo 'DPD France - Sync complete. <br/>';
        } else {
            echo 'DPD France - No orders to update.';
        }
    }
}
