<?php
/**
 * Copyright 2025 DPD France S.A.S.
 *
 * This file is a part of dpdfrance module for Prestashop.
 *
 * NOTICE OF LICENSE
 *
 * This file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for
 * your needs please contact us at support.ecommerce@dpd.fr.
 *
 * @author    DPD France S.A.S. <support.ecommerce@dpd.fr>
 * @copyright 2025 DPD France S.A.S.
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
if (!defined('_PS_VERSION_')) {
    exit;
}

use PrestaShop\Module\DPDFrance\ExternalContentProvider\EprintProvider;
use PrestaShop\Module\DPDFrance\ExternalContentProvider\Transcription\Webtrace\clsTrace;
use PrestaShop\Module\DPDFrance\ExternalContentProvider\WebtraceProvider;
use PrestaShop\Module\DPDFrance\Util\DPDCompliancy;
use PrestaShop\Module\DPDFrance\Util\DPDConfig;
use PrestaShop\Module\DPDFrance\Util\DPDLogs;
use PrestaShop\Module\DPDFrance\Util\DPDPdfMerger;
use PrestaShop\Module\DPDFrance\Util\DPDStation;
use PrestaShop\Module\DPDFrance\Util\DPDTools;

class AdminDPDFranceController extends ModuleAdminController
{
    public $identifier = 'DPDFrance';
    private $pdfMerger;
    private $erreurLabel;
    private $dirPdf;

    public function __construct()
    {
        parent::__construct();

        $this->name = 'DPDFrance';
        $this->bootstrap = true;
        $this->display = 'view';
        $this->meta_title = 'Gestion des expÃ©ditions';
        $this->dirPdf = DPDFRANCE_PDF_FOLDER_PATH;

        // Check the current prestashop & DPD France module version, log if updated
        DPDLogs::getLastLog();
        DPDLogs::checkVersion();

        if (!$this->module->active) {
            Tools::redirectAdmin($this->context->link->getAdminLink('AdminHome'));
        }
    }

    /**
     * {@inheritdoc}
     * @param $isNewTheme
     */
    public function setMedia($isNewTheme = false)
    {
        parent::setMedia($isNewTheme);

        $pathUri = $this->module->getPathUri();

        $css = [
            $pathUri . 'views/css/admin/jquery.fancybox.css',
            $pathUri . 'views/css/admin/AdminDPDFrance.css',
        ];

        if (DPDFRANCE_DEV_MODE === true) {
            $css[] = $pathUri . 'views/css/dev.css';
        }

        $this->addCSS($css);
        $this->addJS([
            $pathUri . 'views/js/admin/jquery/plugins/marquee/jquery.marquee.min.js',
            $pathUri . 'views/js/admin/admin_france_pdf.js',
        ]);
    }

    /**
     * {@inheritdoc}
     * @return void
     */
    public function initToolBarTitle()
    {
        $this->toolbar_title[] = $this->l('Orders');
        $this->toolbar_title[] = $this->l('DPD deliveries management');
    }

    public function translationLog()
    {
        $this->l('Permission denied');
        $this->l('customer-Permission denied Invalid Customer ');
        $this->l('No name in address given');
        $this->l('No city in address given');
        $this->l('No street in address given');
        $this->l('No zipCode in address given / zipCode is not valid');
        $this->l('CountryPrefix-ZipCode-City is invalid');
        $this->l('No countryPrefix in address given');
        $this->l('CountryPrefix is invalid');
        $this->l('Invalid shipper CenterNumber for customer CenterNumber');
        $this->l(
            'The maximum weight allowed for a Pickup parcelshop delivery is 20 kg, please modify the parcel weight'
        );
        $this->l('The maximum weight allowed for a Predict delivery is 30 kg, please modify the parcel weight');
        $this->l('The maximum weight allowed for a Classic delivery is 30 kg, please modify the parcel weight');
        $this->l(
            'The maximum weight allowed for a Europe and Intercontinental delivery is 30 kg, please modify the parcel weight'
        );
        $this->l('Invalid weight - No decimal');
        $this->l('Invalid weight - 0');
        $this->l('Length of ZipCode is wrong. (3 instead of 4)');
        $this->l('CountryPrefix-ZipCode-City is invalid ');
        $this->l('RoutingError: Error occured in DPD routing');
        $this->l('AutoConsolidation not possible on MultiServices');
        $this->l('No contact information (email/sms) given.');
        $this->l('No email given');
        $this->l('No sms number given');
        $this->l('Shopid is not set');
        $this->l('Parcelshop Error: Shopid not found');
        $this->l('Print Master label is not allowed');
        $this->l('Service is denied (2PSZustellung = Relais) ');
        $this->l('Invalid consolidation type ');
        $this->l('Predict and Consolidation are not compatible!');
        $this->l('2PS delivery and Consolidation are not compatible!');
        $this->l('Predict and 2PS delivery are not compatible! ');
        $this->l('Reverse Shop and Consolidation are not compatible!');
        $this->l('Service not exportable');
        $this->l('Service not exportable - eServiceTypPredict - only national possible');
        $this->l('Service not exportable - eServiceTypPredict - only national possible');
        $this->l('Service not importable/exportable - eServiceTypReverseShop - only national possible');
        $this->l('no sms given number');
        $this->l('Service not exportable - eServiceTypReverseShop - only national possible');

        return true;
    }

    /**
     * ? Get eligible orders and builds up display Admin DPD France
     * @return string|void
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     * @throws PrestaShopExceptionCore
     * @throws SoapFault
     */
    public function renderView()
    {
        // Prepare the module context if the shop has the multistore enabled
        $shopInfo = DPDTools::getContext(
            Shop::getContext(),
            $this->context->shop->getContextShopGroupID(),
            $this->context->shop->getContextShopID()
        );
        $isContextShop = $shopInfo['isContextShop'];
        $contextShopId = $shopInfo['shopId'];
        $currentShopId = $shopInfo['currentShopId'];
        $currentShopGroupId = $shopInfo['currentShopGroupId'];

        $this->fields_form[]['form'] = [];
        $helper = $this->buildHelper();
        $msg = '';

        // Ajax call - Export label
        if (Tools::getIsset('exportLabel')) {
            // get the PS config weight unit and check for correct unit
            $psWeightUnit = strtolower(
                trim(
                    Configuration::get(
                        'PS_WEIGHT_UNIT',
                        $this->context->language->id,
                        $currentShopGroupId,
                        $currentShopId,
                        false
                    )
                )
            );
            $psWeightUnitType = 'kg';
            switch ($psWeightUnit) {
                case $psWeightUnit === 'g' || $psWeightUnit === 'gr' || $psWeightUnit === 'gram' || $psWeightUnit === 'grams' || $psWeightUnit === 'gramme' || $psWeightUnit === 'grammes':
                    $psWeightUnitType = 'g';
                    break;
                case $psWeightUnit === 'lb' || $psWeightUnit === 'lbs' || $psWeightUnit === 'pound' || $psWeightUnit === 'livre' || $psWeightUnit === 'pounds' || $psWeightUnit === 'livres':
                    $psWeightUnitType = 'lb';
                    break;
                case $psWeightUnit === 'oz' || $psWeightUnit === 'ounce' || $psWeightUnit === 'once' || $psWeightUnit === 'ounces' || $psWeightUnit === 'onces':
                    $psWeightUnitType = 'oz';
                    break;
            }

            file_put_contents(__DIR__ . '/../../session.txt', 'start');
            if (Tools::getIsset('checkbox')) {
                $orders = Tools::getValue('checkbox');
                $print_format = DPDConfig::get(
                    'DPDFRANCE_FORMAT_PRINT',
                    $this->context->language->id,
                    $currentShopGroupId,
                    $currentShopId
                );
                $return = Tools::getValue('retour');
                $extraInsurance = Tools::getValue('advalorem');
                $parcelWeight = Tools::getValue('parcelweight');

                if (is_string($orders)) {
                    $orders = explode(',', $orders);
                }
                if (!empty($orders)) {
                    $this->pdfMerger = new DPDPdfMerger();
                    $zplPath = [];
                    foreach ($orders as $order) {
                        $this->erreurLabel = false;
                        $order = new Order($order);
                        $hasDpdOrder = false;
                        if ($hasDpdOrder) {
                            $this->generatedLabelAndTracking($order, 0, $print_format);
                        } elseif (isset($parcelWeight[$order->id])) {
                            $this->cleanLabel($order);
                            $weights = $parcelWeight[$order->id];
                            $hasCreate = [];
                            $insurance = false;
                            $hasReturn = false;

                            if ($extraInsurance) {
                                foreach ($extraInsurance as $insurances) {
                                    if ($insurances == $order->id) {
                                        $insurance = true;
                                    }
                                }
                            }

                            if ($return) {
                                foreach ($return as $item) {
                                    if ($item == $order->id) {
                                        $hasReturn = true;
                                    }
                                }
                            }

                            if (!empty($order->id_address_delivery)) {
                                foreach ($weights as $weightKey => $weight) {
                                    // Check weight for a comma and incorrect format
                                    $weight = DPDTools::formatWeightToFloatSyntax($weight);
                                    // Get the converted weight
                                    $weight = DPDTools::convertWeightToKilograms((float)$weight, $psWeightUnitType);

                                    if (DPDConfig::get(
                                            'DPDFRANCE_FORMAT_MOD',
                                            $this->context->language->id,
                                            (int)$order->id_shop_group,
                                            (int)$order->id_shop
                                        ) === 'pdf' && DPDConfig::get(
                                            'DPDFRANCE_PRINTER_CONNECT',
                                            $this->context->language->id,
                                            (int)$order->id_shop_group,
                                            (int)$order->id_shop
                                        ) !== 'ip') {
                                        $hasCreate[] = $this->generatedLabelAndTracking(
                                            $order,
                                            $weight,
                                            $weightKey,
                                            $print_format,
                                            $hasDpdOrder,
                                            $hasReturn,
                                            $insurance
                                        );
                                    } else {
                                        $hasCreate[] = $this->generatedLabelAndTracking(
                                            $order,
                                            $weight,
                                            $weightKey,
                                            $print_format,
                                            $hasDpdOrder,
                                            $hasReturn,
                                            $insurance,
                                            $zplPath
                                        );
                                        $zplPath = array_unique($zplPath);
                                    }
                                }
                            }
                        }

                        if (!$this->erreurLabel && DPDConfig::get(
                                'DPDFRANCE_FORMAT_MOD',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            ) !== 'pdf') {
                            if (count($zplPath) > 0) {
                                if (DPDConfig::get(
                                        'DPDFRANCE_PRINTER_CONNECT',
                                        $this->context->language->id,
                                        (int)$order->id_shop_group,
                                        (int)$order->id_shop
                                    ) === 'ip') {
                                    foreach ($zplPath as $path) {
                                        unlink($path);
                                    }
                                    file_put_contents(__DIR__ . '/../../session.txt', 'finish');
                                    DPDTools::htmlAutoCloseWindow();
                                }
                            } else {
                                file_put_contents(__DIR__ . '/../../session.txt', 'finish');
                                DPDTools::htmlAutoCloseWindow();
                            }
                        }
                    }
                    file_put_contents(__DIR__ . '/../../session.txt', 'finish');

                    if (DPDConfig::get(
                            'DPDFRANCE_FORMAT_MOD',
                            $this->context->language->id,
                            $currentShopGroupId,
                            $currentShopId
                        ) === 'pdf' && DPDConfig::get(
                            'DPDFRANCE_PRINTER_CONNECT',
                            $this->context->language->id,
                            $currentShopGroupId,
                            $currentShopId
                        ) !== 'ip') {
                        $pdfCreate = false;
                        foreach ($hasCreate as $create) {
                            if ($create) {
                                $pdfCreate = true;
                            }
                        }
                        if ($pdfCreate) {
                            $this->pdfMerger->merge('browser', 'label.pdf');
                            foreach (scandir($this->dirPdf) as $file) {
                                $file = $this->dirPdf . '/' . $file;
                                if (is_file($file) && pathinfo($file, PATHINFO_EXTENSION) === 'pdf') {
                                    unlink($file);
                                }
                            }
                        } else {
                            DPDTools::htmlAutoCloseWindow();
                        }
                    } else {
                        file_put_contents(__DIR__ . '/../../session.txt', 'finish');
                        DPDTools::htmlAutoCloseWindow();
                    }
                }
            }
        }

        // Ajax call - Update delivered orders
        if (Tools::getIsset('updateDeliveredOrders')) {
            if (Tools::getIsset('checkbox')) {
                $orders = Tools::getValue('checkbox');
                //Sanitize $orders
                foreach ($orders as $order => $orderId) {
                    $orders[$order] = pSQL($orderId);
                }
                if (is_string($orders)) {
                    $orders = explode(',', $orders);
                }
                if (!empty($orders)) {
                    /*
                     * If error modify SQL select method
                     * Look for the same SQL query in updateShippedOrders
                     * SELECT    O.`id_order` AS id_order
                     * FROM      ' . _DB_PREFIX_ . 'orders AS O,
                     * ' . _DB_PREFIX_ . 'carrier AS CA
                     */
                    $sql = new DbQuery();
                    $sql->select('id_order')
                        ->from('orders', 'O')
                        ->from('carrier', 'CA')
                        ->where('CA.id_carrier = O.id_carrier')
                        ->where('id_order IN (' . implode(',', array_map('intval', $orders)) . ')');
                    $orderlist = Db::getInstance()->executeS($sql);
                    if (!empty($orderlist)) {
                        // Check if there are DPD orders
                        foreach ($orderlist as $orders) {
                            $id_order = $orders['id_order'];
                            if (Validate::isLoadedObject($order = new Order($id_order))) {
                                $history = new OrderHistory();
                                $history->id_order = (int)$id_order;
                                $history->id_order_state = DPDConfig::get(
                                    'DPDFRANCE_ETAPE_LIVRE',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                );
                                $history->changeIdOrderState(
                                    DPDConfig::get(
                                        'DPDFRANCE_ETAPE_LIVRE',
                                        $this->context->language->id,
                                        (int)$order->id_shop_group,
                                        (int)$order->id_shop
                                    ),
                                    $id_order
                                );
                                $history->id_employee = Context::getContext()->employee->id;
                                $history->addWithemail();
                            }
                        }
                        $msg = '<div class="okmsg">' . $this->l('Delivered orders statuses were updated') . '</div>';
                    } else {
                        $msg = '<div class="warnmsg">' . $this->l('No DPD trackings to generate.') . '</div>';
                    }
                } else {
                    $msg = '<div class="warnmsg">' . $this->l('No order selected.') . '</div>';
                }
            } else {
                $msg = '<div class="warnmsg">' . $this->l('No order selected.') . '</div>';
            }
        }

        // Ajax call - Update shipped orders
        if (Tools::getIsset('updateShippedOrders')) {
            if (Tools::getIsset('checkbox')) {
                $orders = Tools::getValue('checkbox');
                //Sanitize $orders
                foreach ($orders as $order => $orderId) {
                    $orders[$order] = pSQL($orderId);
                }
                if (is_string($orders)) {
                    $orders = explode(',', $orders);
                }
                $sql = new DbQuery();
                $sql->select('id_order')
                    ->from('orders', 'O')
                    ->from('carrier', 'CA')
                    ->where('CA.id_carrier = O.id_carrier')
                    ->where('id_order IN (' . implode(',', array_map('intval', $orders)) . ')');
                $orderlist = Db::getInstance()->executeS($sql);
                // Check if there are DPD orders
                if (!empty($orderlist)) {
                    foreach ($orderlist as $orders) {
                        $id_order = $orders['id_order'];
                        if (Validate::isLoadedObject($order = new Order($id_order))) {
                            // If order choices is 3 then use id order otherwise use order reference
                            $internalref = DPDConfig::get(
                                'DPDFRANCE_AUTO_UPDATE',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            ) === DPDTools::DPD_AUTOUPDATE_ORDER_ID ? $order->id : $order->reference;
                            $service = DPDTools::getService(
                                $order,
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );

                            $serviceLivraisonInfos = DPDConfig::getServiceLivraisonInfos(
                                $service,
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );

                            $customer = new Customer($order->id_customer);
                            if (DPDConfig::get(
                                    'DPDFRANCE_AUTO_UPDATE',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                ) !== DPDTools::DPD_AUTOUPDATE_PARCEL_NUMBER) {
                                $trackingNumber = $internalref . '_' . sprintf(
                                        '%03d',
                                        $serviceLivraisonInfos['depot_code']
                                    ) . $serviceLivraisonInfos['shipper_code'];

                                if (DPDCompliancy::isMyPrestashopVersion('<', '8.0')) {
                                    // Le champ shipping_number a Ã©tÃ© supprimÃ© Ã  partir de la version 8.0
                                    Db::getInstance()->update(
                                        'orders',
                                        [
                                            'shipping_number' => pSQL($trackingNumber),
                                        ],
                                        'id_order = ' . $id_order
                                    );
                                }

                                Db::getInstance()->update(
                                    'order_carrier',
                                    [
                                        'tracking_number' => pSQL($trackingNumber),
                                    ],
                                    'id_order = ' . $id_order
                                );
                            }
                            $history = new OrderHistory();
                            $history->id_order = (int)$id_order;
                            $history->changeIdOrderState(
                                DPDConfig::get(
                                    'DPDFRANCE_ETAPE_EXPEDIEE',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                ),
                                $id_order
                            );
                            $history->id_employee = $this->context->employee->id;
                            $carrier = new Carrier($order->id_carrier, (int)Context::getContext()->language->id);
                            $url = DPDTools::PREFIX_TRACEX_URL . $internalref . '_' . sprintf(
                                    '%03d',
                                    $serviceLivraisonInfos['depot_code']
                                ) . $serviceLivraisonInfos['shipper_code'];
                            $template_vars = [
                                '{followup}' => $url,
                                '{firstname}' => $customer->firstname,
                                '{lastname}' => $customer->lastname,
                                '{id_order}' => $order->id,
                                '{order_name}' => $order->reference,
                            ];
                            switch (Language::getIsoById((int)$order->id_lang)) {
                                case 'fr':
                                    $subject = 'Votre commande sera livrÃ©e par DPD';
                                    break;
                                case 'en':
                                    $subject = 'Your parcel will be delivered by DPD';
                                    break;
                                case 'es':
                                    $subject = 'Su pedido serÃ¡ enviado por DPD';
                                    break;
                                case 'it':
                                    $subject = 'Il vostro pacchetto sarÃ¡ trasportato da DPD';
                                    break;
                                case 'de':
                                    $subject = 'Ihre Bestellung wird per DPD geliefert werden';
                                    break;
                            }
                            if (!$history->addWithemail(true, $template_vars)) {
                                $this->_errors[] = Tools::displayError(
                                    'an error occurred while changing status or was unable to send e-mail to the customer'
                                );
                            }
                            if (!Validate::isLoadedObject($customer) || !Validate::isLoadedObject($carrier)) {
                                die(Tools::displayError());
                            }
                            Mail::Send(
                                $order->id_lang,
                                'in_transit',
                                $subject,
                                $template_vars,
                                $customer->email,
                                $customer->firstname . ' ' . $customer->lastname
                            );
                        }
                    }
                    $msg = '<div class="okmsg">' . $this->l(
                            'Shipped orders statuses were updated and tracking numbers added.'
                        ) . '</div>';
                } else {
                    $msg = '<div class="warnmsg">' . $this->l('No trackings to generate.') . '</div>';
                }
            } else {
                $msg = '<div class="warnmsg">' . $this->l('No order selected.') . '</div>';
            }
        }

        // Ajax call - Export DAT File of the selected order
        if (Tools::getIsset('exportOrders')) {
            if (Tools::getIsset('checkbox')) {
                $orders = Tools::getValue('checkbox');
                //Sanitize $orders
                foreach ($orders as $order => $orderId) {
                    $orders[$order] = pSQL($orderId);
                }
                if (is_string($orders)) {
                    $orders = explode(',', $orders);
                }
                $liste_expeditions = 'O.id_order IN (' . implode(',', array_map('intval', $orders)) . ')';

                if (!empty($orders)) {
                    $sql = new DbQuery();
                    $sql->select('O.id_order, AD.lastname, AD.firstname, AD.postcode, AD.city, CL.iso_code, C.email')
                        ->from('orders', 'O')
                        ->from('carrier', 'CA')
                        ->from('customer', 'C')
                        ->from('address', 'AD')
                        ->from('country', 'CL')
                        ->where('O.id_address_delivery = AD.id_address')
                        ->where('C.id_customer = O.id_customer')
                        ->where('CL.id_country = AD.id_country')
                        ->where('CA.id_carrier = O.id_carrier')
                        ->where('(' . $liste_expeditions . ')')
                        ->orderBy('id_order DESC');
                    /** @var array $orderlist */
                    $orderlist = Db::getInstance()->executeS($sql);
                    if (!empty($orderlist)) {
                        // File creation
                        $record = new DPDStation();
                        foreach ($orderlist as $order_var) {
                            // Shipper information retrieval
                            $order = new Order($order_var['id_order']);

                            if (DPDConfig::get(
                                    'DPDFRANCE_ETAPE_EXPEDIEE',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                ) === $order->current_state) {
                                continue;
                            }

                            $nom_exp = DPDConfig::get(
                                'DPDFRANCE_NOM_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );           // Raison sociale expÃ©diteur
                            $address_exp = DPDConfig::get(
                                'DPDFRANCE_ADDRESS_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );   // Adresse
                            $address2_exp = DPDConfig::get(
                                'DPDFRANCE_ADDRESS2_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            ); // ComplÃ©ment d'adresse
                            $cp_exp = DPDConfig::get(
                                'DPDFRANCE_CP_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );             // Code postal
                            $ville_exp = DPDConfig::get(
                                'DPDFRANCE_VILLE_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );       // Ville
                            $code_pays_exp = 'F';                                                                                              // Code pays
                            $tel_exp = DPDConfig::get(
                                'DPDFRANCE_TEL_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );           // TÃ©lÃ©phone
                            $email_exp = DPDConfig::get(
                                'DPDFRANCE_EMAIL_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );       // E-mail
                            $gsm_exp = DPDConfig::get(
                                'DPDFRANCE_GSM_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );           // NÂ° GSM
                            $internalref = DPDConfig::get(
                                'DPDFRANCE_AUTO_UPDATE',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            ) === DPDTools::DPD_AUTOUPDATE_ORDER_ID ? $order->id : $order->reference; // Reference ou id de la commande
                            $customer = new Customer($order->id_customer);
                            $address_invoice = new Address(
                                $order->id_address_invoice,
                                Context::getContext()->language->id
                            );
                            $address_delivery = new Address(
                                $order->id_address_delivery,
                                Context::getContext()->language->id
                            );
                            $code_pays_dest = DPDTools::getIsoCodeByIdCountry($address_delivery->id_country);

                            // Ireland override
                            if ($code_pays_dest === 'IRL') {
                                $address_delivery->postcode = stripos(
                                    $address_delivery->city,
                                    'Dublin'
                                ) !== false ? 1 : 2;
                            }

                            $instr_liv_cleaned = '';
                            $order_messages = Message::getMessagesByOrderId($order->id);
                            if ($order_messages) {
                                foreach ($order_messages as $message) {
                                    $instr_liv_cleaned = str_replace(["\r\n", "\n", "\r", "\t"],
                                        ' ',
                                        html_entity_decode($message['message'], ENT_QUOTES));
                                    break;
                                }
                            }

                            $service = DPDTools::getService(
                                $order,
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );
                            $relay_id = '';
                            preg_match(
                                '/(P|[a-z]{2})\d{5}/i',
                                $address_delivery->company,
                                $matches,
                                PREG_OFFSET_CAPTURE
                            );
                            if ($matches) {
                                $relay_id = $matches[0][0];
                            }
                            $tel_dest = DPDTools::getPhoneNumberFromDpdShipping(
                                (int)$order->id_cart,
                                (int)$order->id_carrier
                            );
                            if (empty($tel_dest)) {
                                $tel_dest = DPDTools::getPhoneNumberFromAddress($address_invoice, $address_delivery);
                            }
                            $mobile = preg_replace('/\s+/', '', $tel_dest);
                            $poids_all = Tools::getValue('parcelweight');
                            $poids = null;
                            if (Tools::strtolower(
                                    Configuration::get(
                                        'PS_WEIGHT_UNIT',
                                        $this->context->language->id,
                                        (int)$order->id_shop_group,
                                        (int)$order->id_shop,
                                        false
                                    )
                                ) === 'kg') {
                                $poids = (int)($poids_all[$order->id] * 100);
                            }
                            if (Tools::strtolower(
                                    Configuration::get(
                                        'PS_WEIGHT_UNIT',
                                        $this->context->language->id,
                                        (int)$order->id_shop_group,
                                        (int)$order->id_shop,
                                        false
                                    )
                                ) === 'g') {
                                $poids = (int)($poids_all[$order->id] * 0.1);
                            }
                            // 2: Inverse, 3: Sur demande, 4: PrÃ©parÃ©e
                            $retour_option = DPDConfig::get(
                                'DPDFRANCE_RETOUR_OPTION',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );

                            $serviceLivraisonInfos = DPDConfig::getServiceLivraisonInfos(
                                $service,
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            );

                            // Send datas for the exporting DAT FILE
                            $record->formatRow(
                                $internalref,
                                $order->id,
                                $service,
                                Tools::getValue('advalorem'),
                                $order->total_paid,
                                Tools::getValue('retour'),
                                $retour_option,
                                $poids,
                                $address_delivery,
                                $code_pays_dest,
                                $mobile,
                                $tel_dest,
                                $relay_id,
                                $customer->email,
                                $nom_exp,
                                $address2_exp,
                                $cp_exp,
                                $ville_exp,
                                $address_exp,
                                $code_pays_exp,
                                $tel_exp,
                                $instr_liv_cleaned,
                                $serviceLivraisonInfos['shipper_code'],
                                $email_exp,
                                $gsm_exp
                            );
                        }
                        $record->download();
                    } else {
                        $msg = '<div class="warnmsg">' . $this->l('No orders to export.') . '</div>';
                    }
                } else {
                    $msg = '<div class="warnmsg">' . $this->l('No orders to export.') . '</div>';
                }
            } else {
                $msg = '<div class="warnmsg">' . $this->l('No order selected.') . '</div>';
            }
        }

        // Display section
        // Error message if shipper info is missing
        if (!DPDConfig::isModuleEnabled(
            $this->context->language->id,
            $currentShopGroupId,
            $currentShopId
        )) {
            echo '<div class="warnmsg">' . $this->l(
                    'Warning! Your DPD Depot code and contract number are missing. You must configure the DPD module in order to use the export and tracking features.'
                ) . '</div>';
            exit;
        }

        // Error message if the weight unit is unrecognized
        if (!DPDTools::checkWeightUnit(
            $this->context->language->id,
            $currentShopGroupId,
            $currentShopId
        )) {
            echo '<div class="warnmsg">' . $this->l(
                    'Warning: you have configured an unrecognised weight unit. Please, refer to the list provided in the documentation if you want the weights in your DAT file.'
                ) . '</div>';
            exit;
        }

        // Calls function to get orders
        $order_info = [];
        $orderStatusList = [];
        $statuses = OrderState::getOrderStates(Context::getContext()->language->id);
        foreach ($statuses as $status) {
            $orderStatusList[$status['id_order_state']] = $status['name'];
        }

        // Retrieve orders with the module context
        if ($isContextShop) {
            // Context is a shop
            $orders = DPDTools::getAllOrders(
                $this->context->language->id,
                Shop::getGroupFromShop($contextShopId),
                $contextShopId
            );
        } else {
            // Context is all shops or a group of shops
            foreach ($contextShopId as $shopId) {
                if (!empty(
                DPDTools::getAllOrders(
                    $this->context->language->id,
                    Shop::getGroupFromShop($shopId),
                    $shopId
                )
                )) {
                    $orders[] = DPDTools::getAllOrders(
                        $this->context->language->id,
                        Shop::getGroupFromShop($shopId),
                        $shopId
                    );
                }
                if ($orders && count($orders) > 1) {
                    $orders = array_merge($orders[0], $orders[1]);
                }
            }
            if (count($orders) === 1) {
                $orders = $orders[0];
            }
        }
        $liste_expeditions = 'O.id_order IN (' . implode(',', $orders) . ')';
        $predict_carrier_sql = $classic_carrier_sql = $relais_carrier_sql = '';

        $opt_marketplace_sql = DPDConfig::get(
            'DPDFRANCE_MARKETPLACE_MODE',
            $this->context->language->id,
            $currentShopGroupId,
            $currentShopId
        ) ?
            'CA.name LIKE "%%"' :
            'CA.name LIKE "%DPD%"';

        if (Shop::isFeatureActive()) {
            $predict_carrier_log = (int)DPDConfig::get(
                    'DPDFRANCE_PREDICT_CARRIER_ID',
                    $this->context->language->id,
                    $currentShopGroupId,
                    $currentShopId
                ) . ',' . implode(
                    ',',
                    DPDConfig::get(
                        'DPDFRANCE_PREDICT_CARRIER_LOG',
                        $this->context->language->id,
                        $currentShopGroupId,
                        $currentShopId
                    )
                );
            $classic_carrier_log = (int)DPDConfig::get(
                    'DPDFRANCE_CLASSIC_CARRIER_ID',
                    $this->context->language->id,
                    $currentShopGroupId,
                    $currentShopId
                ) . ',' . implode(
                    ',',
                    DPDConfig::get(
                        'DPDFRANCE_CLASSIC_CARRIER_LOG',
                        $this->context->language->id,
                        $currentShopGroupId,
                        $currentShopId
                    )
                );
            $relais_carrier_log = (int)DPDConfig::get(
                    'DPDFRANCE_RELAIS_CARRIER_ID',
                    $this->context->language->id,
                    $currentShopGroupId,
                    $currentShopId
                ) . ',' . implode(
                    ',',
                    DPDConfig::get(
                        'DPDFRANCE_RELAIS_CARRIER_LOG',
                        $this->context->language->id,
                        $currentShopGroupId,
                        $currentShopId
                    )
                );

            foreach (Shop::getShops() as $shop) {
                if ((int)DPDConfig::get(
                    'DPDFRANCE_PREDICT_CARRIER_ID',
                    $this->context->language->id,
                    (int)$shop['id_shop_group'],
                    (int)$shop['id_shop']
                )) {
                    $predict_carrier_log .= (int)DPDConfig::get(
                            'DPDFRANCE_PREDICT_CARRIER_ID',
                            $this->context->language->id,
                            (int)$shop['id_shop_group'],
                            (int)$shop['id_shop']
                        )
                        . ',' . implode(
                            ',',
                            DPDConfig::get(
                                'DPDFRANCE_PREDICT_CARRIER_LOG',
                                $this->context->language->id,
                                (int)$shop['id_shop_group'],
                                (int)$shop['id_shop']
                            )
                        );
                    $predict_carrier_sql = 'CA.id_carrier IN (' . $predict_carrier_log . ') OR ';
                }
                if ((int)DPDConfig::get(
                    'DPDFRANCE_CLASSIC_CARRIER_ID',
                    $this->context->language->id,
                    (int)$shop['id_shop_group'],
                    (int)$shop['id_shop']
                )) {
                    $classic_carrier_log .= (int)DPDConfig::get(
                            'DPDFRANCE_CLASSIC_CARRIER_ID',
                            $this->context->language->id,
                            (int)$shop['id_shop_group'],
                            (int)$shop['id_shop']
                        )
                        . ',' . implode(
                            ',',
                            DPDConfig::get(
                                'DPDFRANCE_CLASSIC_CARRIER_LOG',
                                $this->context->language->id,
                                (int)$shop['id_shop_group'],
                                (int)$shop['id_shop']
                            )
                        );
                    $classic_carrier_sql = 'CA.id_carrier IN (' . $classic_carrier_log . ') OR ';
                }
                if ((int)DPDConfig::get(
                    'DPDFRANCE_RELAIS_CARRIER_ID',
                    $this->context->language->id,
                    (int)$shop['id_shop_group'],
                    (int)$shop['id_shop']
                )) {
                    $relais_carrier_log .= (int)DPDConfig::get(
                            'DPDFRANCE_RELAIS_CARRIER_ID',
                            $this->context->language->id,
                            (int)$shop['id_shop_group'],
                            (int)$shop['id_shop']
                        )
                        . ',' . implode(
                            ',',
                            DPDConfig::get(
                                'DPDFRANCE_RELAIS_CARRIER_LOG',
                                $this->context->language->id,
                                (int)$shop['id_shop_group'],
                                (int)$shop['id_shop']
                            )
                        );
                    $relais_carrier_sql = 'CA.id_carrier IN (' . $relais_carrier_log . ') OR ';
                }
            }
        } else {
            if ((int)DPDConfig::get(
                'DPDFRANCE_PREDICT_CARRIER_ID',
                $this->context->language->id,
                $currentShopGroupId,
                $currentShopId
            )) {
                $predict_carrier_log = (int)DPDConfig::get(
                        'DPDFRANCE_PREDICT_CARRIER_ID',
                        $this->context->language->id,
                        $currentShopGroupId,
                        $currentShopId
                    )
                    . ',' . implode(
                        ',',
                        DPDConfig::get(
                            'DPDFRANCE_PREDICT_CARRIER_LOG',
                            $this->context->language->id,
                            $currentShopGroupId,
                            $currentShopId
                        )
                    );
                $predict_carrier_sql = 'CA.id_carrier IN (' . $predict_carrier_log . ') OR ';
            }
            if ((int)DPDConfig::get(
                'DPDFRANCE_CLASSIC_CARRIER_ID',
                $this->context->language->id,
                $currentShopGroupId,
                $currentShopId
            )) {
                $classic_carrier_log = (int)DPDConfig::get(
                        'DPDFRANCE_CLASSIC_CARRIER_ID',
                        $this->context->language->id,
                        $currentShopGroupId,
                        $currentShopId
                    )
                    . ',' . implode(
                        ',',
                        DPDConfig::get(
                            'DPDFRANCE_CLASSIC_CARRIER_LOG',
                            $this->context->language->id,
                            $currentShopGroupId,
                            $currentShopId
                        )
                    );
                $classic_carrier_sql = 'CA.id_carrier IN (' . $classic_carrier_log . ') OR ';
            }
            if ((int)DPDConfig::get(
                'DPDFRANCE_RELAIS_CARRIER_ID',
                $this->context->language->id,
                $currentShopGroupId,
                $currentShopId
            )) {
                $relais_carrier_log = (int)DPDConfig::get(
                        'DPDFRANCE_RELAIS_CARRIER_ID',
                        $this->context->language->id,
                        $currentShopGroupId,
                        $currentShopId
                    )
                    . ',' . implode(
                        ',',
                        DPDConfig::get(
                            'DPDFRANCE_RELAIS_CARRIER_LOG',
                            $this->context->language->id,
                            $currentShopGroupId,
                            $currentShopId
                        )
                    );
                $relais_carrier_sql = 'CA.id_carrier IN (' . $relais_carrier_log . ') OR ';
            }
        }


        $custom_carriers_sql = Hook::exec('actionDPDfranceCustomCarrierSql', []);
        if(!empty($custom_carriers_sql)) {
            $custom_carrier_sql = 'CA.id_carrier IN (' . implode(',', $custom_carriers_sql) . ') ';
        }

        if (!empty($orders)) {
            $sql = 'SELECT  O.id_order,
                            O.id_cart,
                            AD.lastname,
                            AD.firstname,
                            AD.postcode,
                            AD.city,
                            CL.iso_code,
                            C.email,
                            CA.name
                    FROM    ' . _DB_PREFIX_ . 'orders AS O,
                            ' . _DB_PREFIX_ . 'carrier AS CA,
                            ' . _DB_PREFIX_ . 'customer AS C,
                            ' . _DB_PREFIX_ . 'address AS AD,
                            ' . _DB_PREFIX_ . 'country AS CL
                    WHERE   O.id_address_delivery = AD.id_address AND
                            C.id_customer         = O.id_customer AND
                            CL.id_country         = AD.id_country AND
                            CA.id_carrier         = O.id_carrier AND
                            (' . $predict_carrier_sql . $classic_carrier_sql . $relais_carrier_sql . $opt_marketplace_sql . $custom_carrier_sql . ')
                    AND     (' . $liste_expeditions . ')
                    ORDER BY id_order DESC';

            $orderlist = Db::getInstance()->ExecuteS($sql);

            if (!empty($orderlist)) {
                // Get all active payment methods from the module configuration
                $sqlMarketplace = new DbQuery();
                $sqlMarketplace->select('payment_method')
                    ->from('dpdfrance_marketplace')
                    ->where('active = 1');
                $sqlMarketplaceResult = Db::getInstance()->executeS($sqlMarketplace);
                if (!empty($sqlMarketplaceResult)) {
                    foreach ($sqlMarketplaceResult as $payment) {
                        $marketplace[] = $payment['payment_method'];
                    }
                } else {
                    $marketplace = [];
                }

                foreach ($orderlist as $order_var) {
                    $order = new Order($order_var['id_order']);
                    $address_delivery = new Address($order->id_address_delivery, Context::getContext()->language->id);
                    $current_state_id = (int)$order->current_state;
                    $current_state_name = array_key_exists(
                        $order->current_state,
                        $orderStatusList
                    ) ? $orderStatusList[$order->current_state] : '--';
                    $internalref = DPDConfig::get(
                        'DPDFRANCE_AUTO_UPDATE',
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    ) === DPDTools::DPD_AUTOUPDATE_ORDER_ID ? $order->id : $order->reference;

                    switch ($current_state_id) {
                        case DPDConfig::get(
                            'DPDFRANCE_ETAPE_LIVRE',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ):
                        case DPDConfig::get(
                            'DPDFRANCE_ETAPE_EXPEDIEE',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ):
                            $dernierstatutcolis = '<img src="../modules/dpdfrance/views/img/admin/tracking.png" title="Trace du colis" alt="tracking" />';
                            break;
                        default:
                            $dernierstatutcolis = '';
                            break;
                    }
                    $weight = $order->getTotalWeight();
                    $amount = number_format($order->total_paid, 2, '.', '.') . ' â¬';
                    $service = DPDTools::getService(
                        $order,
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    );
                    $code_pays_dest = DPDTools::getIsoCodeByIdCountry($address_delivery->id_country);

                    $serviceLivraisonInfos = DPDConfig::getServiceLivraisonInfos(
                        $service,
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    );

                    switch ($service) {
                        case 'HDP_PRE':
                        case 'PRE':
                            $type = $code_pays_dest !== 'F' ?
                                'Predict Export<img src="../modules/dpdfrance/views/img/admin/service_predict.png" title="Predict Export" alt="predict export"/>' :
                                'Predict<img src="../modules/dpdfrance/views/img/admin/service_predict.png" title="Predict" alt="predict"/>';
                            $address = '<a class="popup" href="' . DPDTools::PREFIX_GOOGLE_URL . str_replace(
                                    ' ',
                                    '+',
                                    $address_delivery->address1
                                ) . ',' . str_replace(' ', '+', $address_delivery->postcode) . '+' . str_replace(
                                    ' ',
                                    '+',
                                    $address_delivery->city
                                ) . '&output=embed" target="_blank">' . ($address_delivery->company ? $address_delivery->company . '<br/>' : '') . $address_delivery->address1 . '<br/>' . $address_delivery->postcode . ' ' . $address_delivery->city . '</a>';
                            break;
                        case 'REL':
                            $type = 'Relais<img src="../modules/dpdfrance/views/img/admin/service_relais.png" title="Relais" alt="relais"/>';
                            $relay_id = '';
                            preg_match(
                                '/(P|[a-z]{2})\d{5}/i',
                                $address_delivery->company,
                                $matches,
                                PREG_OFFSET_CAPTURE
                            );
                            if ($matches) {
                                $relay_id = $matches[0][0];
                            }
                            $address = '<a class="popup" href="' . DPDTools::PREFIX_RELAIS_URL . $relay_id . '" target="_blank">' . $address_delivery->company . '<br/>' . $address_delivery->postcode . ' ' . $address_delivery->city . '</a>';
                            break;
                        case 'HDP_CLA':
                        case 'CLA':
                            $type = $code_pays_dest !== 'F' ?
                                'Classic Export<img src="../modules/dpdfrance/views/img/admin/service_world.png" title="Classic Export" alt="classic export"/>' :
                                'Classic<img src="../modules/dpdfrance/views/img/admin/service_dom.png" title="Classic" alt="classic"/>';
                            $address = '<a class="popup" href="' . DPDTools::PREFIX_GOOGLE_URL . str_replace(
                                    ' ',
                                    '+',
                                    $address_delivery->address1
                                ) . ',' . str_replace(' ', '+', $address_delivery->postcode) . '+' . str_replace(
                                    ' ',
                                    '+',
                                    $address_delivery->city
                                ) . '&output=embed" target="_blank">' . ($address_delivery->company ? $address_delivery->company . '<br/>' : '') . $address_delivery->address1 . '<br/>' . $address_delivery->postcode . ' ' . $address_delivery->city . '</a>';
                            break;
                    }

                    $errorMessage = '';
                    $orderDpd = $this->getDpdOrder($order, $errorMessage);
                    $sqlCountry = new DbQuery();
                    $sqlCountry->select('iso_code')
                        ->from('country')
                        ->innerJoin(
                            'address',
                            null,
                            _DB_PREFIX_ . 'country.id_country = ' . _DB_PREFIX_ . 'address.id_country'
                        )
                        ->where(_DB_PREFIX_ . 'address.id_address = ' . (int)$order->id_address_delivery);
                    $countrys = Db::getInstance()->executeS($sqlCountry);

                    $order_info[] = [
                        'checked' => ((int)$current_state_id === DPDConfig::get(
                            'DPDFRANCE_ETAPE_EXPEDITION',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ) ? 'checked="checked"' : ''),
                        'id' => $order->id,
                        'reference' => $order->reference,
                        'date' => date('d/m/Y H:i:s', strtotime($order->date_add)),
                        'nom' => $address_delivery->firstname . ' ' . $address_delivery->lastname,
                        'type' => $type,
                        'address' => $address,
                        'poids' => $weight,
                        'weightunit' => Configuration::get(
                            'PS_WEIGHT_UNIT',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop,
                            false
                        ),
                        'prix' => $amount,
                        'advalorem_checked' => (DPDConfig::get(
                            'DPDFRANCE_AD_VALOREM',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ) === true ? 'checked="checked"' : ''),
                        'retour_checked' => (DPDConfig::get(
                            'DPDFRANCE_RETOUR_OPTION',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ) !== DPDTools::NO_RETURN ? 'checked="checked"' : ''),
                        'retour_authorized' => in_array($countrys[0]['iso_code'], DPDTools::RETURN_EXPORT_COUNTRIES, true) ? true : false,
                        'statut' => $current_state_name,
                        'depot_code' => sprintf('%03d', $serviceLivraisonInfos['depot_code']),
                        'shipper_code' => $serviceLivraisonInfos['shipper_code'],
                        'dernier_statut_colis' => $dernierstatutcolis,
                        'labelprint' => ($this->hasDpdOrder($order) && $orderDpd !== '0'),
                        'statuslabel' => ($orderDpd === '0'),
                        'statustext' => $errorMessage,
                        'expediee' => (DPDConfig::get(
                                'DPDFRANCE_ETAPE_EXPEDIEE',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            ) === $order->current_state),
                        'country' => $countrys[0]['iso_code'],
                        'marketplace_checked' => in_array($order->payment, $marketplace) ? true : false,
                    ];
                }
            } else {
                $order_info['error'] = true;
            }
        } else {
            $order_info['error'] = true;
        }

        // Assign smarty variables
        $this->context->smarty->assign(
            [
                'msg' => $msg,
                'stream' => DPDTools::getDPDRssInfos(),
                'token' => $this->token,
                'dpdfrance_auto_update_option' => DPDConfig::get(
                    'DPDFRANCE_AUTO_UPDATE',
                    $this->context->language->id,
                    $currentShopGroupId,
                    $currentShopId
                ),
                'order_info' => $order_info,
                'service' => DPDConfig::get(
                    'DPDFRANCE_SERVICE_TYPE',
                    $this->context->language->id,
                    $currentShopGroupId,
                    $currentShopId
                ),
                'dpdfrance_retour_option' => DPDConfig::get(
                    'DPDFRANCE_RETOUR_OPTION',
                    $this->context->language->id,
                    $currentShopGroupId,
                    $currentShopId
                ),
                'dpdfrance_mode_format' => DPDConfig::get(
                    'DPDFRANCE_FORMAT_MOD',
                    $this->context->language->id,
                    $currentShopGroupId,
                    $currentShopId
                ),
                'dpdfrance_usb_name' => DPDConfig::get(
                    'DPDFRANCE_PRINTER_SERIAL',
                    $this->context->language->id,
                    $currentShopGroupId,
                    $currentShopId
                ),
                'dpdfrance_base_dir' => Context::getContext()->link->getModuleLink('dpdfrance', 'ajax'),
                'dpdfrance_token' => Tools::hash('dpdfrance/ajax'),
            ]
        );

        if (DPDFRANCE_DEV_MODE) {
            $this->context->smarty->assign([
                'dpdfrance_dev_badge' => DPDTools::getHtmlDevBadge(),
            ]);
        }

        return $helper->generateForm($this->fields_form);
    }

    protected function buildHelper()
    {
        $helper = new HelperForm();
        $helper->module = $this->module;
        $helper->override_folder = 'dpdfrance/';
        $helper->identifier = $this->identifier;
        $helper->token = Tools::getAdminTokenLite('Admin' . $this->name);
        $helper->languages = $this->_languages;
        $helper->currentIndex = $this->context->link->getAdminLink('Admin' . $this->name);
        $helper->default_form_language = $this->default_form_language;
        $helper->allow_employee_form_lang = $this->allow_employee_form_lang;
        $helper->toolbar_scroll = true;
        $helper->toolbar_btn = $this->initToolbar();
        $helper->background_color = 'red';

        return $helper;
    }

    /**
     * ? Remove old label
     * @param $order
     * @return bool
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function cleanLabel($order): bool
    {
        if (is_int($order)) {
            $order = new Order($order);
        }

        if (!($order instanceof Order)) {
            return false;
        }

        Db::getInstance()->delete(
            'dpdfrance_order',
            'id_order = ' . (int)$order->id
        );

        return true;
    }

    /**
     * Generate X pdf page with the label for one order
     * A la generation de l'Ã©tiquette, cela va mettre le lien de tracking dans les details de la commande
     *
     * @param int|Order $order
     * @param string $weight
     * @param int $weightKey
     * @param string $print_format
     * @param bool $hasDpdOrder
     * @param bool $return
     * @param bool $extraInsurance
     * @param array $zplPath
     * @return bool
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     * @throws PrestaShopExceptionCore
     */
    public function generatedLabelAndTracking(
        $order,
        string $weight,
        int $weightKey,
        string $print_format = 'a4',
        bool $hasDpdOrder = true,
        bool $return = false,
        bool $extraInsurance = false,
        array &$zplPath = []
    ) {
        if (is_int($order)) {
            $order = new Order($order);
        }
        if (!($order instanceof Order)) {
            return false;
        }

        $parcelIds = [];
        $error = false;

        // Initialisation d'EprintProvider
        $eprintUser = DPDConfig::get(
            'DPDFRANCE_API_LOGIN',
            $this->context->language->id,
            (int)$order->id_shop_group,
            (int)$order->id_shop
        );
        $eprintPassword = DPDConfig::get(
            'DPDFRANCE_API_PASSWORD',
            $this->context->language->id,
            (int)$order->id_shop_group,
            (int)$order->id_shop
        );
        if (EprintProvider::initSoapClient($eprintUser, $eprintPassword, DPDFRANCE_DEV_USE_WS_TEST) === false) {
            return false;
        }

        $address_delivery = new Address($order->id_address_delivery);
        $customer = new Customer($order->id_customer);
        $service = DPDTools::getService(
            $order,
            $this->context->language->id,
            (int)$order->id_shop_group,
            (int)$order->id_shop
        );

        $serviceLivraisonInfos = DPDConfig::getServiceLivraisonInfos(
            $service,
            $this->context->language->id,
            (int)$order->id_shop_group,
            (int)$order->id_shop
        );

        $referenceNumber = DPDConfig::get(
            'DPDFRANCE_AUTO_UPDATE',
            $this->context->language->id,
            (int)$order->id_shop_group,
            (int)$order->id_shop
        ) === DPDTools::DPD_AUTOUPDATE_ORDER_ID ? (string)$order->id : $order->reference;
        $parcelValidWeight = true;

        // Ajout du commentaire de la commande
        $customerMessage = '';
        $orderMessages = Message::getMessagesByOrderId($order->id);
        if ($orderMessages) {
            foreach ($orderMessages as $message) {
                $customerMessage = Tools::strtolower(DPDTools::stripAccents($message['message']));
                break;
            }
        }

        // Create shipment if not exist
        if (!$hasDpdOrder) {
            $shipmentLabelRequest = [
                'customer_countrycode' => 250,
                'customer_centernumber' => $serviceLivraisonInfos['depot_code'],
                'customer_number' => $serviceLivraisonInfos['shipper_code'],
                'weight' => $weight,
                'referencenumber' => $referenceNumber,
                'receiveraddress' => [
                    'name' => $address_delivery->firstname . ' ' . $address_delivery->lastname,
                    // Ajout du code ISO selon le filtre du webservice de Cargo
                    'countryPrefix' => DPDTools::getCargoFilteredIsoCodeByIdCountry($address_delivery->id_country),
                    // Ajout du code postal selon le filtrage de Cargo
                    'zipCode' => DPDTools::getCpCargoFormat($address_delivery->id_country, $address_delivery->postcode),
                    'city' => $address_delivery->city,
                    'street' => $address_delivery->address1 . ' ' . $address_delivery->address2,
                    'phoneNumber' => empty($address_delivery->phone_mobile) ? $address_delivery->phone : $address_delivery->phone_mobile,
                ],
                'receiverinfo' => [
                    // Ajout du nom de la sociÃ©tÃ© du destinataire
                    'name2' => $address_delivery->company,
                    // Ajout du commentaire de la commande
                    'vinfo1' => $customerMessage,
                ],
                'shipperaddress' => [
                    'name' => DPDConfig::get(
                        'DPDFRANCE_NOM_EXP',
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    ),
                    'countryPrefix' => 'FR',
                    'zipCode' => DPDConfig::get(
                        'DPDFRANCE_CP_EXP',
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    ),
                    'city' => DPDConfig::get(
                        'DPDFRANCE_VILLE_EXP',
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    ),
                    'street' => DPDConfig::get(
                            'DPDFRANCE_ADDRESS_EXP',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ) . ' ' . DPDConfig::get(
                            'DPDFRANCE_ADDRESS2_EXP',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ),
                    'phoneNumber' => DPDConfig::get(
                        'DPDFRANCE_TEL_EXP',
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    ),
                ],
                'services' => [],
            ];

            // Assurance Advalorem
            if ($extraInsurance) {
                $shipmentLabelRequest['services']['extraInsurance'] = [
                    'value' => $order->total_paid,
                    'type' => 'byShipments',
                ];
            }

            // Retour en relais
            if (
                $return && (
                    DPDConfig::get(
                        'DPDFRANCE_RETOUR_OPTION',
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    ) === DPDTools::RETURN_ON_DEMAND ||
                    DPDConfig::get(
                        'DPDFRANCE_RETOUR_OPTION',
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    ) === DPDTools::RETURN_PREPARED
                )
            ) {
                $shipmentLabelRequest['services']['reverse'] = [
                    'expireOffset' => 175,
                    'type' => DPDConfig::get(
                        'DPDFRANCE_RETOUR_OPTION',
                        $this->context->language->id,
                        (int)$order->id_shop_group,
                        (int)$order->id_shop
                    ) === DPDTools::RETURN_ON_DEMAND ? 'OnDemand' : 'Prepared',
                    'retour_receiver' => [
                        'name' => DPDConfig::get(
                            'DPDFRANCE_NOM_EXP',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ),
                        'countryPrefix' => 'FR',
                        'zipCode' => DPDConfig::get(
                            'DPDFRANCE_CP_EXP',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ),
                        'city' => DPDConfig::get(
                            'DPDFRANCE_VILLE_EXP',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ),
                        'street' => DPDConfig::get(
                                'DPDFRANCE_ADDRESS_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            ) . ' ' . DPDConfig::get(
                                'DPDFRANCE_ADDRESS2_EXP',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            ),
                        'phoneNumber' => DPDConfig::get(
                            'DPDFRANCE_TEL_EXP',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ),
                    ],
                ];
            }

            // If Predict OU Hors DPD Predict
            if ((string)$service === 'PRE' || (string)$service === 'HDP_PRE') {
                $phoneNumber = '';
                if ($service === 'PRE') {
                    $phoneNumber = DPDTools::getPhoneNumberFromDpdShipping(
                        (int)$order->id_cart,
                        (int)$order->id_carrier
                    );
                }
                if (empty($phoneNumber) === true) {
                    $address_invoice = new Address($order->id_address_invoice, Context::getContext()->language->id);
                    $address_delivery = new Address($order->id_address_delivery, Context::getContext()->language->id);
                    $phoneNumber = DPDTools::getPhoneNumberFromAddress($address_invoice, $address_delivery);
                }
                $shipmentLabelRequest['services']['contact']['sms'] = $phoneNumber;
                $shipmentLabelRequest['services']['contact']['email'] = $customer->email;
                $shipmentLabelRequest['services']['contact']['type'] = 'Predict';

                // On met le numÃ©ro de tÃ©lÃ©phone du predict sur l'Ã©tiquette
                $shipmentLabelRequest['receiveraddress']['phoneNumber'] = $phoneNumber;
            }

            // If Relay
            if ((string)$service === 'REL') {
                $sqlQuery = new DbQuery();
                $sqlQuery->select('*')
                    ->from('dpdfrance_shipping')
                    ->where('id_cart = ' . (int)$order->id_cart)
                    ->where('id_carrier = ' . (int)$order->id_carrier);
                $shipping = Db::getInstance()->getRow($sqlQuery);
                // On ajoute le numÃ©ro de tÃ©lÃ©phone, s'il existe, pour l'avisage client. La logique est plus permissive que pour le PREDICT car le tel est non obligatoire.
                $phoneNumber = DPDTools::getPhoneNumberFromDpdShipping((int)$order->id_cart, (int)$order->id_carrier);
                if (empty($phoneNumber) === true) {
                    $address_invoice = new Address($order->id_address_invoice, Context::getContext()->language->id);
                    $address_delivery = new Address($order->id_address_delivery, Context::getContext()->language->id);
                    $phoneNumber = DPDTools::getPhoneNumberFromAddress($address_invoice, $address_delivery);
                }
                $customer = new Customer($order->id_customer);
                if (empty($phoneNumber) === false) {
                    $shipmentLabelRequest['services']['contact']['sms'] = $phoneNumber;
                }
                $shipmentLabelRequest['services']['contact']['email'] = $customer->email;
                $shipmentLabelRequest['services']['contact']['type'] = 'No';
                $shipmentLabelRequest['services']['parcelshop']['shopaddress']['countryPrefix'] = 'FR';
                $shipmentLabelRequest['services']['parcelshop']['shopaddress']['zipCode'] = $shipping['postcode'];
                $shipmentLabelRequest['services']['parcelshop']['shopaddress']['city'] = $shipping['city'];
                $shipmentLabelRequest['services']['parcelshop']['shopaddress']['street'] = $shipping['address1'] . ' ' . ($shipping['address2'] ?: '');
                $shipmentLabelRequest['services']['parcelshop']['shopaddress']['name'] = $shipping['company'];
                $shipmentLabelRequest['services']['parcelshop']['shopaddress']['shopid'] = $shipping['relay_id'];
            }

            // Check valid weight for each delivery type (relay, predict, classic and world)
            if ((string)$service === 'REL') {
                if ($weight > 20) {
                    $parcelValidWeight = false;
                    $error = true;
                    $errorMessage = 'The maximum weight allowed for a Pickup parcelshop delivery is 20 kg, please modify the parcel weight';
                }
            } else {
                if ($weight > 30) {
                    $parcelValidWeight = false;
                    $error = true;

                    // Retrieve the id of the world carrier (SQL select may be incorrect due to back office carrier change name function)
                    $sqlGetWorldCarrierId = 'SELECT id_carrier FROM ' . _DB_PREFIX_ . "carrier WHERE name = 'Livraison internationale par DPD';";
                    $result = db::getInstance()->executeS($sqlGetWorldCarrierId);

                    $carrierWorldId = (!empty($result) ? $result[0]['id_carrier'] : null);

                    if ($order->id_carrier === $carrierWorldId) {
                        $errorMessage = 'The maximum weight allowed for a Europe and Intercontinental delivery is 30 kg, please modify the parcel weight';
                    } else {
                        if ((string)$service === 'PRE' || (string)$service === 'HDP_PRE') {
                            $errorMessage = 'The maximum weight allowed for a Predict delivery is 30 kg, please modify the parcel weight';
                        } else {
                            $errorMessage = 'The maximum weight allowed for a Classic delivery is 30 kg, please modify the parcel weight';
                        }
                    }
                }
            }

            // If parcel weight is not valid skip try and catch
            if ($parcelValidWeight) {
                try {
                    $shipments = EprintProvider::createShipment($shipmentLabelRequest, DPDFRANCE_EPRINT_BC);
                } catch (Exception $e) {
                    $this->erreurLabel = true;
                    $error = true;
                    $errorMessage = $e->getMessage();
                }
            }

            if ($error) {
                // Handle custom error message for specific CP
                $errorCustomFormat = DPDTools::checkCustomErrorLabel($address_delivery->id_country);
                $errorCustomMessage = $errorCustomFormat[1] ? pSQL(
                    $this->l($errorMessage) . $this->l(
                        '. Please follow this format (where n is a number and a is a letter) :'
                    ) . $errorCustomFormat[0]
                ) : pSQL($this->l($errorMessage));

                Db::getInstance()->insert(
                    'dpdfrance_order',
                    [
                        'id_order' => (int)$order->id,
                        'id_order_dpd' => '0',
                        'id_shipment_number_dpd' => '',
                        'error_message' => $errorCustomMessage,
                    ],
                    false,
                    true,
                    Db::INSERT_IGNORE
                );

                return false;
            }

            // $shipments[1] contient potentiellement le Retour
            $parcelIds[] = $shipments[0]->Shipment->BarcodeId;
            $barCode = $shipments[0]->Shipment->BarCode;
        } else {
            $parcelIds = $this->getDpdOrder($order, $error, true);
        }

        // Get label
        foreach ($parcelIds as $parcelIdKey => $parcelId) {
            $receiveLabelRequest = [
                'countrycode' => 250,
                'centernumber' => $serviceLivraisonInfos['depot_code'],
                'customer_number' => $serviceLivraisonInfos['shipper_code'],
                'parcelnumber' => $parcelId,
            ];

            if ($print_format === 'a6' && DPDConfig::get(
                    'DPDFRANCE_FORMAT_MOD',
                    $this->context->language->id,
                    (int)$order->id_shop_group,
                    (int)$order->id_shop
                ) === 'pdf') {
                $receiveLabelRequest['labelType'] = [
                    'type' => 'PDF_A6',
                ];
            } elseif ($print_format === 'a4' && DPDConfig::get(
                    'DPDFRANCE_FORMAT_MOD',
                    $this->context->language->id,
                    (int)$order->id_shop_group,
                    (int)$order->id_shop
                ) === 'pdf') {
                $receiveLabelRequest['labelType'] = [
                    'type' => 'PDF',
                ];
            } else {
                $receiveLabelRequest['labelType'] = [
                    'type' => Tools::strtoupper(
                        DPDConfig::get(
                            'DPDFRANCE_FORMAT_MOD',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        )
                    ),
                ];
            }
            try {
                $labels = EprintProvider::getLabel($receiveLabelRequest, DPDFRANCE_EPRINT_BC);
            } catch (Exception $e) {
                $this->erreurLabel = true;
                $error = true;
            }

            if ($error || empty($labels)) {
                return false;
            }

            if (
                DPDConfig::get(
                    'DPDFRANCE_FORMAT_MOD',
                    $this->context->language->id,
                    (int)$order->id_shop_group,
                    (int)$order->id_shop
                ) === 'pdf' &&
                DPDConfig::get(
                    'DPDFRANCE_PRINTER_CONNECT',
                    $this->context->language->id,
                    (int)$order->id_shop_group,
                    (int)$order->id_shop
                ) !== 'ip'
            ) {
                if (empty($this->pdfMerger)) {
                    $this->pdfMerger = new DPDPdfMerger();
                }
                if (!$return) {
                    $pdfPath = $this->dirPdf . '/Label_' . (int)$order->id . '_' . (int)preg_replace(
                            '/[^a-zA-Z0-9\-_]/i',
                            '',
                            $parcelIdKey
                        ) . '_' . (int)preg_replace('/[^a-zA-Z0-9\-_]/i', '', $weightKey) . '.pdf';
                    file_put_contents($pdfPath, $labels[0]->label);
                    $this->pdfMerger->addPdf($pdfPath);
                } else {
                    foreach ($labels as $labelKey => $label) {
                        if ($label->type !== 'EPRINTATTACHMENT') {
                            $pdfPath = $this->dirPdf . '/Label_' . (int)$order->id . '_' . (int)preg_replace(
                                    '/[^a-zA-Z0-9\-_]/i',
                                    '',
                                    $parcelIdKey
                                ) . '_' . (int)preg_replace(
                                    '/[^a-zA-Z0-9\-_]/i',
                                    '',
                                    $labelKey
                                ) . '_' . (int)preg_replace('/[^a-zA-Z0-9\-_]/i', '', $weightKey) . '.pdf';
                            file_put_contents($pdfPath, $label->label);
                            $this->pdfMerger->addPdf($pdfPath);
                        }
                    }
                }
            } elseif (
                DPDConfig::get(
                    'DPDFRANCE_FORMAT_MOD',
                    $this->context->language->id,
                    (int)$order->id_shop_group,
                    (int)$order->id_shop
                ) === 'pdf' &&
                DPDConfig::get(
                    'DPDFRANCE_PRINTER_CONNECT',
                    $this->context->language->id,
                    (int)$order->id_shop_group,
                    (int)$order->id_shop
                ) === 'ip'
            ) {
                foreach ($labels as $labelKey => $label) {
                    if (DPDConfig::get(
                            'DPDFRANCE_PRINTER_CONNECT',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ) === 'ip') {
                        if (
                            ($conn = fsockopen(
                                DPDConfig::get(
                                    'DPDFRANCE_PRINTER_IP',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                ),
                                DPDConfig::get(
                                    'DPDFRANCE_PRINTER_PORT',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                ),
                                $errno,
                                $errstr
                            )) === false
                        ) {
                            echo 'configuration not ok';
                        }
                        fwrite($conn, $label->label, Tools::strlen($label->label));
                        fclose($conn);
                    }
                    $path = $this->dirPdf . '/Label_' . (int)$order->id . '_' . (int)preg_replace(
                            '/[^a-zA-Z0-9\-_]/i',
                            '',
                            $parcelIdKey
                        ) . '_' . (int)preg_replace('/[^a-zA-Z0-9\-_]/i', '', $labelKey) . '_' . (int)preg_replace(
                            '/[^a-zA-Z0-9\-_]/i',
                            '',
                            $weightKey
                        ) . '.' . preg_replace(
                            '/[^a-zA-Z0-9\-_]/i',
                            '',
                            DPDConfig::get(
                                'DPDFRANCE_FORMAT_MOD',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            )
                        );
                    file_put_contents($path, $label->label);
                    $zplPath[] = $path;
                }
            } else {
                foreach ($labels as $labelKey => $label) {
                    if ((string)DPDConfig::get(
                            'DPDFRANCE_PRINTER_CONNECT',
                            $this->context->language->id,
                            (int)$order->id_shop_group,
                            (int)$order->id_shop
                        ) === 'ip') {
                        if (
                            ($conn = fsockopen(
                                DPDConfig::get(
                                    'DPDFRANCE_PRINTER_IP',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                ),
                                DPDConfig::get(
                                    'DPDFRANCE_PRINTER_PORT',
                                    $this->context->language->id,
                                    (int)$order->id_shop_group,
                                    (int)$order->id_shop
                                ),
                                $errno,
                                $errstr
                            )) === false
                        ) {
                            echo 'configuration not ok';
                        }
                        fwrite($conn, $label->label, Tools::strlen($label->label));
                        fclose($conn);
                    }
                    $path = $this->dirPdf . '/Label_' . (int)$order->id . '_' . (int)preg_replace(
                            '/[^a-zA-Z0-9\-_]/i',
                            '',
                            $parcelIdKey
                        ) . '_' . (int)preg_replace('/[^a-zA-Z0-9\-_]/i', '', $labelKey) . '_' . (int)preg_replace(
                            '/[^a-zA-Z0-9\-_]/i',
                            '',
                            $weightKey
                        ) . '.' . preg_replace(
                            '/[^a-zA-Z0-9\-_]/i',
                            '',
                            DPDConfig::get(
                                'DPDFRANCE_FORMAT_MOD',
                                $this->context->language->id,
                                (int)$order->id_shop_group,
                                (int)$order->id_shop
                            )
                        );
                    file_put_contents($path, $label->label);
                    $zplPath[] = $path;
                }
            }
        }

        if (!$hasDpdOrder) {
            Db::getInstance()->insert(
                'dpdfrance_order',
                [
                    'id_order' => (int)$order->id,
                    'id_order_dpd' => pSQL($parcelId),
                    'id_shipment_number_dpd' => pSQL($barCode),
                ],
                false,
                true,
                Db::INSERT_IGNORE
            );

            $orderCarrier = new OrderCarrier($order->getIdOrderCarrier());

            $trackingNumber = null;
            if (DPDConfig::get(
                    'DPDFRANCE_AUTO_UPDATE',
                    $this->context->language->id,
                    (int)$order->id_shop_group,
                    (int)$order->id_shop
                ) === DPDTools::DPD_AUTOUPDATE_ORDER_REF) {
                // Mode 1 : rÃ©fÃ©rences internes
                $trackingNumber = $order->getUniqReference() . '_' . sprintf(
                        '%03d',
                        $serviceLivraisonInfos['depot_code']
                    ) . $serviceLivraisonInfos['shipper_code'];
            } elseif (DPDConfig::get(
                    'DPDFRANCE_AUTO_UPDATE',
                    $this->context->language->id,
                    (int)$order->id_shop_group,
                    (int)$order->id_shop
                ) === DPDTools::DPD_AUTOUPDATE_PARCEL_NUMBER) {
                // Mode 2 : numero de la commande
                $trackingNumber = $parcelId;
            } elseif (DPDConfig::get(
                    'DPDFRANCE_AUTO_UPDATE',
                    $this->context->language->id,
                    (int)$order->id_shop_group,
                    (int)$order->id_shop
                ) === DPDTools::DPD_AUTOUPDATE_ORDER_ID) {
                // Mode 3 : id de la commande
                $trackingNumber = (string)$order->id . '_' . sprintf(
                        '%03d',
                        $serviceLivraisonInfos['depot_code']
                    ) . $serviceLivraisonInfos['shipper_code'];
            }

            $orderCarrier->tracking_number = $trackingNumber;
            $orderCarrier->save();
        }

        return true;
    }

    /**
     * @param $order
     * @param bool $error
     * @return bool if order not empty or === 0
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function hasDpdOrder($order, bool $error = true): bool
    {
        $dpdOrder = $this->getDpdOrder($order);

        if (!empty($dpdOrder)) {
            return true;
        }
        if (isset($dpdOrder) && $dpdOrder === '0' && $error) {
            return true;
        }

        return false;
    }

    /**
     * Get one or list of id_order_dpd
     * @param int|Order $order
     * @param array|null $error
     * @param bool $all
     * @return array|mixed|string
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function getDpdOrder($order, &$error = null, bool $all = false)
    {
        if (is_int($order)) {
            $order = new Order($order);
        }

        if ($order instanceof Order && !empty($order->id)) {
            $sql = new DbQuery();
            $sql->select('*')
                ->from('dpdfrance_order')
                ->where('id_order = ' . (int)$order->id);
            $result = Db::getInstance()->executeS($sql);

            if (
                !empty($result[0]['id_order_dpd']) ||
                (isset($result[0]['id_order_dpd']) && $result[0]['id_order_dpd'] === '0')
            ) {
                $error = $result[0]['error_message'];
                if ($all) {
                    $resultArray = [];
                    foreach ($result as $dpd) {
                        $resultArray[] = $dpd['id_order_dpd'];
                    }

                    return $resultArray;
                }

                return $result[0]['id_order_dpd'];
            }
        }

        return '';
    }
}
