<?php
/**
 * Copyright 2025 DPD France S.A.S.
 *
 * This file is a part of dpdfrance module for Prestashop.
 *
 * NOTICE OF LICENSE
 *
 * This file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for
 * your needs please contact us at support.ecommerce@dpd.fr.
 *
 * @author    DPD France S.A.S. <support.ecommerce@dpd.fr>
 * @copyright 2025 DPD France S.A.S.
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

namespace PrestaShop\Module\DPDFrance\Util;

if (!defined('_PS_VERSION_')) {
    exit;
}

use Db;
use DbQuery;
use Exception;
use Module;
use PrestaShopDatabaseException;

class DPDLogs
{
    /**
     * List of configuration parameters prohibited for logging
     */
    const PROHIBITED_LOGS = [
        'DPDFRANCE_WEBTRACE_LOGIN',
        'DPDFRANCE_WEBTRACE_PASSWORD',
        'DPDFRANCE_API_LOGIN',
        'DPDFRANCE_API_PASSWORD',
        'DPDFRANCE_GOOGLE_API_KEY',
        'DPDFRANCE_RELAIS_KEY',
        'DPDFRANCE_LEADTIME_API_KEY',
    ];

    /**
     * Get the last log of the table 'dpdfrance_module_logs'
     * If no logs, we register the current prestashop & DPD France module version
     *
     * @return array
     * @throws Exception
     * @throws PrestaShopDatabaseException
     */
    public static function getLastLog()
    {
        $dpdfranceModuleVersion = Module::getInstanceByName('dpdfrance')->version;
        $sqlLastLog = new DbQuery();
        $sqlLastLog->select('*')
            ->from('dpdfrance_module_logs')
            ->where('id = (SELECT MAX(last.id) FROM ' . _DB_PREFIX_ . 'dpdfrance_module_logs last)');
        $executeLastLog = DB::getInstance()->executeS($sqlLastLog);
        if (count($executeLastLog) === 0) {
            $logInserted = self::setLog($dpdfranceModuleVersion);
            if ($logInserted === true) {
                $lastLog = self::getLastLog();
                if ($lastLog === null) {
                    //Ca se produit lors des install
                    return array();
                }
                return self::getLastLog();
            } else {
                throw new Exception("Module dpdfrance. Les informations de log n'ont pas pu être enregistrées.", 500);
            }
        } else {
            return $executeLastLog[0];
        }
    }

    /**
     * Set a log with the prestashop & DPD France module version
     *
     * @param string $dpdfranceModuleVersion
     * @return bool
     * @throws Exception
     * @throws PrestaShopDatabaseException
     */
    public static function setLog(string $dpdfranceModuleVersion)
    {
        $log = Db::getInstance()->insert(
            'dpdfrance_module_logs',
            [
                'dpdfrance_module_version' => pSQL($dpdfranceModuleVersion),
                'prestashop_version' => pSQL(_PS_VERSION_),
            ]
        );
        return $log;
    }

    /**
     * Get a full log of the table 'dpdfrance_full_logs' and 'dpdfrance_module_logs'
     * No return time because there's no null coalescing in older versions of PHP
     *
     * @return mixed
     */
    public static function getFullLog()
    {
        $sqlFullLogs = new DbQuery();
        $sqlFullLogs->select(
            'ml.datetime AS datetime_ml, fl.datetime AS datretime_fl, ml.dpdfrance_module_version, ml.prestashop_version, fl.param_name, fl.old_param_value, fl.new_param_value'
        )
            ->from('dpdfrance_module_logs', 'ml')
            ->innerJoin('dpdfrance_full_logs', 'fl', 'ml.id = fl.id_dpdfrance_module_logs')
            ->orderBy('datretime_fl DESC');

        return Db::getInstance()->executeS($sqlFullLogs);
    }

    /**
     * Set a full log for all configuration parameters updates (except for PROHIBITED_LOGS)
     *
     * @param string $paramName
     * @param string $oldParamValue
     * @param string $newParamValue
     * @return bool
     * @throws Exception
     * @throws PrestaShopDatabaseException
     */
    public static function setFullLog(string $paramName, string $oldParamValue, string $newParamValue)
    {
        if (in_array($paramName, self::PROHIBITED_LOGS)) {
            return false;
        }
        $lastLog = self::getLastLog();

        return Db::getInstance()->insert(
            'dpdfrance_full_logs',
            [
                'id_dpdfrance_module_logs' => pSQL($lastLog["id"]),
                'param_name' => pSQL($paramName),
                'old_param_value' => pSQL($oldParamValue),
                'new_param_value' => pSQL($newParamValue),
            ]
        );
    }

    /**
     * Check for differences between the module/prestashop versions and the logs
     *
     * @return void
     * @throws Exception
     */
    public static function checkVersion()
    {
        $dpdfranceModuleVersion = Module::getInstanceByName('dpdfrance')->version;
        $lastLog = self::getLastLog();
        if ($lastLog["dpdfrance_module_version"] != $dpdfranceModuleVersion) {
            self::setLog($dpdfranceModuleVersion);
        } else {
            if ($lastLog["prestashop_version"] != _PS_VERSION_) {
                self::setLog($dpdfranceModuleVersion);
            }
        }
    }
}
